/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend
├── __init__.py
├── admin.py
├── apps.py
├── clients.py
├── fixtures
│   └── initial_data.json
├── forms.py
├── management
│   ├── __init__.py
│   └── commands
│       ├── __init__.py
│       ├── chromadb.py
│       └── envia_emails_reset_password.py
├── migrations
│   ├── 0001_initial.py
│   ├── 0002_alter_institucion_logo.py
│   ├── 0003_clase_institucion_customuser_institucion_and_more.py
│   └── __init__.py
├── models.py
├── onboarding.py
├── sabio
│   ├── student
│   │   └── chatbot.py
│   ├── sysprompts
│   │   ├── chatbot.md
│   │   ├── exam_grader.md
│   │   ├── exam_vision.md
│   │   └── pdfvision.md
│   └── teacher
│       └── actualizar_data.py
├── serializers.py
├── signals.py
├── storages.py
├── templates
│   ├── admin
│   │   ├── chat_interface.html
│   │   ├── instituciones_changelist.html
│   │   └── json_import_form.html
│   ├── create_exam.html
│   ├── exam_success.html
│   ├── exam_upload.html
│   ├── home.html
│   ├── index.html
│   ├── password_reset_email.html
│   ├── registration
│   │   └── login.html
│   └── view_exam.html
├── tests.py
├── urls.py
├── utils.py
├── views
│   ├── __init__.py
│   ├── auth_views.py
│   ├── class_views.py
│   ├── document_views.py
│   ├── exam_views.py
│   ├── thread_views.py
│   └── utility_views.py
└── views.py

13 directories, 47 files


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/signals.py:

# from django.db.models.signals import post_save
# from django.contrib.auth.models import User
# from django.dispatch import receiver
# from .models import UserProfile

# @receiver(post_save, sender=UserProfile)
# def create_or_update_user_profile(sender, instance, created, **kwargs):
#     if created:
#         User.objects.create(user=instance, correo=instance.email)
#     instance.profile.save()



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/models.py:

# models.py

from django.db import models
from django.utils.timezone import now
from django.core.exceptions import ValidationError
from django.contrib.auth.models import AbstractUser
from ai_backend.storages import CustomStorage  
from django.utils import timezone
import os
import uuid

custom_storage = CustomStorage()

class Institucion(models.Model):
    TIPOS_INSTITUCION = [
        ('PRIMARIA', 'Primaria'),
        ('SECUNDARIA', 'Secundaria'),
        ('UNIVERSIDAD', 'Universidad'),
        ('COLEGIO', 'Colegio'),
        ('OTRO', 'Otro'),
    ]
    nombre = models.CharField(max_length=255)
    direccion = models.CharField(max_length=255, blank=True, null=True)
    tipo = models.CharField(max_length=50, choices=TIPOS_INSTITUCION)
    contacto_nombre = models.CharField(max_length=255, blank=True, null=True)
    contacto_correo = models.EmailField(blank=True, null=True)
    contacto_telefono = models.CharField(max_length=20, blank=True, null=True)
    logo = models.ImageField(upload_to=CustomStorage().institucion_logo_path, blank=True, null=True)
    color = models.CharField(max_length=7, default='#009DDC')

    def __str__(self):
        return self.nombre

class CustomUser(AbstractUser):
    profesion = models.CharField(max_length=100, blank=True, null=True)
    fecha_nacimiento = models.DateField(null=True, blank=True)
    sexo = models.CharField(max_length=1, choices=[('F', 'Femenino'), ('M', 'Masculino')], blank=True, null=True)
    tipo_usuario = models.CharField(max_length=10, choices=(('alumno', 'Alumno'), ('profesor', 'Profesor')), blank=True, null=True)
    foto = models.ImageField(upload_to=custom_storage.user_profile_image_path, blank=True, null=True)
    has_temporary_password = models.BooleanField(default=False)
    institucion = models.ForeignKey(Institucion, on_delete=models.SET_NULL, null=True, blank=True, related_name='usuarios')

    def __str__(self):
        return f"{self.username} - {self.tipo_usuario}"

class Clase(models.Model):
    nombre = models.CharField(max_length=100)
    profesor = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='clases')
    estudiantes = models.ManyToManyField(CustomUser, related_name='clases_as_student', blank=True)
    institucion = models.ForeignKey(Institucion, on_delete=models.CASCADE, related_name='clases')

    def __str__(self):
        return f"Clase ID-{self.id}"

    def clean(self):
        super().clean()
        if self.profesor.tipo_usuario != 'profesor':
            raise ValidationError("Only user profiles marked as 'profesor' can be assigned to classes.")
        if not self.estudiantes.exists():
            raise ValidationError("A class must have at least one student.")
        
class Horario(models.Model):
    clase = models.ForeignKey(Clase, on_delete=models.CASCADE, related_name='horarios')
    start_datetime = models.DateTimeField()
    end_datetime = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.clase.nombre} - {self.start_datetime} to {self.end_datetime}"

    def clean(self):
        super().clean()
        if self.end_datetime <= self.start_datetime:
            raise ValidationError("The end time must be after the start time.")

class Hilo(models.Model):
    clase = models.ForeignKey(Clase, on_delete=models.CASCADE)
    user = models.ForeignKey(CustomUser, null=True, blank=True, on_delete=models.CASCADE, related_name='hilos')
    fecha_creacion = models.DateTimeField(default=now)
    ultima_actualizacion = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Hilo ID-{self.id}"

    def clean(self):
        super().clean()
        if self.user == self.clase.profesor:
            return  # User is the professor, so allow creation
        if self.clase.estudiantes.filter(id=self.user.id).exists():
            return  # User is a student, so allow creation
        if self.user.is_staff:
            return  # User is staff, so allow creation
        raise ValidationError("Owner of hilo must be a staff member, a student of the class, or the professor to create a hilo in this class.")

    def save(self, *args, **kwargs):
        # Ensure the object is clean before saving
        self.clean()
        super().save(*args, **kwargs)


class Documento(models.Model):
    def documento_upload_path(instance, filename):
        return CustomStorage().documento_upload_to(instance, filename)
    
    archivo = models.FileField(upload_to=documento_upload_path)
    clase = models.ForeignKey(Clase, on_delete=models.CASCADE, related_name='documentos', null=True, blank=True)
    hilo = models.ForeignKey(Hilo, on_delete=models.CASCADE, related_name='documentos', null=True, blank=True)
    tipo = models.CharField(max_length=50)
    fecha_subida = models.DateTimeField(auto_now_add=True)
    hash = models.CharField(max_length=32, blank=True, null=True)

    def __str__(self):
        if self.clase:
            return f"Documento ID-{self.id} | Clase ID-{self.clase.id}"
        elif self.hilo:
            return f"Documento ID-{self.id} | Hilo ID-{self.hilo.id}"
        else:
            return f"Documento ID-{self.id}"

    def clean(self):
        if self.clase and self.hilo:
            raise ValidationError("Un documento no puede estar asociado simultáneamente a una clase y a un hilo.")
        if not self.clase and not self.hilo:
            raise ValidationError("Un documento debe estar asociado a una clase o a un hilo.")
        

class Mensaje(models.Model):
    TYPE_CHOICES = [
        ('system', 'System'),
        ('assistant', 'Assistant'),
        ('user', 'User'),
    ]

    hilo = models.ForeignKey(Hilo, on_delete=models.CASCADE, related_name='mensajes')
    texto = models.TextField()
    es_del_bot = models.CharField(max_length=9, choices=TYPE_CHOICES)
    timestamp = models.DateTimeField(default=now)

    def __str__(self):
        tipo_mensaje = dict(self.TYPE_CHOICES).get(self.es_del_bot, 'Unknown')
        return f"Mensaje ID {self.id} - {tipo_mensaje} - {self.timestamp}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if self.hilo:
            self.hilo.ultima_actualizacion = now()
            self.hilo.save()


## Corrector

class Exam(models.Model):
    title = models.CharField(max_length=255)
    clase = models.ForeignKey(Clase, on_delete=models.CASCADE, related_name='exams')
    professor = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='exams_created')
    created_at = models.DateTimeField(default=now)

    def __str__(self):
        return self.title

    def clean(self):
        super().clean()
        if self.professor.tipo_usuario != 'profesor':
            raise ValidationError("Only professors can create exams.")
        if Exam.objects.filter(clase=self.clase, title=self.title).exclude(id=self.id).exists():
            raise ValidationError("An exam with this title already exists in this class.")

class ExamCorrectionTrainingFile(models.Model):
    exam = models.ForeignKey(Exam, on_delete=models.CASCADE, related_name='exemplary_files')
    document = models.ForeignKey(Documento, on_delete=models.CASCADE)

    def save(self, *args, **kwargs):
        self.file.name = self.generate_unique_filename(self.file.name)
        super().save(*args, **kwargs)

    def generate_unique_filename(self, filename):
        ext = filename.split('.')[-1]
        unique_filename = f"{uuid.uuid4().hex}.{ext}"
        return os.path.join('', unique_filename)

    def __str__(self):
        return os.path.basename(self.file.name)



class ExamResult(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    exam = models.ForeignKey(Exam, on_delete=models.CASCADE)
    grading_result = models.JSONField()
    additional_feedback = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)  # Add this line

    def __str__(self):
        return f"ExamResult for {self.user.username} - {self.exam.title}"
    
    def clean(self):
        super().clean()
        # Ensure that the user is a student in the class the exam belongs to
        if not self.exam.clase.estudiantes.filter(id=self.user.id).exists():
            raise ValidationError("The user must be a student in the class to take this exam.")


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/onboarding.py:

from django.utils.text import slugify
from ai_backend.models import Clase, Horario
import uuid
import os
import sys
from django.contrib.auth import get_user_model

CustomUser = get_user_model()

wd = os.getcwd()
sys.path.append(wd + "/backend")

from chromadb_setup import setup_collection_for_class

def import_json_data(self, data, institucion, request):
        for profesor_data in data.get('profesores', []):
            base_username = slugify(f"{profesor_data['nombre']}{profesor_data['apellido']}")
            unique_username = f"{base_username}-{str(uuid.uuid4())[:8]}"
            # Attempt to retrieve or create the CustomUser associated with the profesor
            user, user_created = CustomUser.objects.get_or_create(
                email=profesor_data['correo'],
                defaults={
                    'first_name': profesor_data['nombre'],
                    'last_name': profesor_data['apellido'],
                    'username': unique_username,
                    'profesion': profesor_data.get('profesion', ''),
                    'fecha_nacimiento': profesor_data.get('fecha_nacimiento'),
                    'sexo': profesor_data.get('sexo', ''),
                    'tipo_usuario': 'profesor',
                }
            )

            for clase_data in profesor_data.get('clases', []):
                clase, _ = Clase.objects.update_or_create(
                    nombre=clase_data['nombre'],
                    defaults={'profesor': user}
                )
                # Call the function to set up the ChromaDB collection for this class
                setup_collection_for_class(clase.id)

                for horario_data in clase_data.get('horarios', []):
                    horario, _ = Horario.objects.update_or_create(
                        clase=clase,
                        start_datetime=horario_data['start_datetime'],
                        end_datetime=horario_data['end_datetime'],
                        defaults={}
                    )


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/serializers.py:

# serializers.py
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework import serializers
from django.contrib.auth import get_user_model
from django.contrib.auth.password_validation import validate_password

CustomUser = get_user_model()

class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        data = super().validate(attrs)
        data.update({
            'id': self.user.id,
            'username': self.user.username,
            'first_name': self.user.first_name,
            'last_name': self.user.last_name,
            'email': self.user.email,
            'profesion': self.user.profesion,
            'fecha_nacimiento': self.user.fecha_nacimiento,
            'sexo': self.user.sexo,
            'tipo_usuario': self.user.tipo_usuario,
            'has_temporary_password': self.user.has_temporary_password,
            'foto': self.user.foto.url if self.user.foto else None,
        })
        return data

class StudentRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = CustomUser
        fields = ['username', 'password', 'password2', 'email', 'fecha_nacimiento', 'sexo']

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Las contraseñas no coinciden."})
        return attrs

    def create(self, validated_data):
        user = CustomUser(
            username=validated_data['username'],
            email=validated_data['email'],
            fecha_nacimiento=validated_data['fecha_nacimiento'],
            sexo=validated_data['sexo'],
            tipo_usuario='alumno'  # Establecer el rol como 'alumno'
        )
        user.set_password(validated_data['password'])
        user.save()
        return user

class UserUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'fecha_nacimiento', 'sexo', 'profesion']
        read_only_fields = ['username']  # No permitimos que el usuario cambie su nombre de usuario


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/__init__.py:

default_app_config = 'ai_backend.apps.MyAppConfig'



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/apps.py:

from django.apps import AppConfig

class MyAppConfig(AppConfig):
    name = 'ai_backend'

    def ready(self):
        import ai_backend.signals  # Importa las señales para asegurarte de que se conecten.



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/forms.py:

from django import forms
from .models import Documento, Institucion, Mensaje
from django.contrib.auth.forms import UserCreationForm, UserChangeForm
from django.contrib.auth import get_user_model

CustomUser = get_user_model()

class DocumentoForm(forms.ModelForm):
    class Meta:
        model = Documento
        fields = ['archivo', 'clase', 'tipo']
        
class InstitucionAdminForm(forms.ModelForm):
    json_file = forms.FileField(required=False, help_text="Upload the JSON file with professors, classes, and schedules")

    class Meta:
        model = Institucion
        fields = '__all__'  # Include all existing fields plus the new json_file field
        
class SendMessageToSabioForm(forms.Form):
    message = forms.CharField(widget=forms.Textarea, required=True)

class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = CustomUser
        fields = UserCreationForm.Meta.fields + ('profesion', 'fecha_nacimiento', 'sexo', 'tipo_usuario',)
        # Include any other fields you want to be part of the user creation form

class CustomUserChangeForm(UserChangeForm):
    class Meta(UserChangeForm.Meta):
        model = CustomUser
        fields = UserChangeForm.Meta.fields
        # If you want to include additional fields in the user update form, add them here

class StudentRegistrationForm(CustomUserCreationForm):
    class Meta(CustomUserCreationForm.Meta):
        model = CustomUser
        fields = ['username', 'password1', 'password2', 'email', 'fecha_nacimiento', 'sexo']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.tipo_usuario = 'alumno'  # Establecer el rol como 'alumno'
        if commit:
            user.save()
        return user
    
class ExamUploadForm(forms.Form):
    sample_exam = forms.FileField(required=False)
    student_exam = forms.FileField(required=False)


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/admin.py:

from django.contrib import admin, messages
from django import forms
from django.db import transaction
from .models import Institucion, Clase, Horario, Mensaje, Documento, Hilo, ExamResult, Exam, ExamCorrectionTrainingFile
import json
from ai_backend.sabio.student.chatbot import main as chatbot_main  # Import your chatbot script
from ai_backend import onboarding as import_json_data
from django.utils.html import format_html
from django.utils.text import slugify
import uuid
from django.contrib.auth import get_user_model
from .forms import CustomUserCreationForm, CustomUserChangeForm
from django.contrib.auth.admin import UserAdmin
from django.db.models import Count
from django.urls import reverse
import os
import sys
from django.contrib.admin import SimpleListFilter
from django.http import HttpResponseRedirect
from ai_backend.sabio.teacher.actualizar_data import main as actualizar_main

CustomUser = get_user_model()

wd = os.getcwd()
sys.path.append(wd + "/backend")

from chromadb_setup import remove_documento_embedding

# Form for uploading JSON to Institucion
class InstitucionAdminForm(forms.ModelForm):
    json_file = forms.FileField(required=False, help_text="Upload a JSON file with professors, classes, and schedules")

    class Meta:
        model = Institucion
        fields = '__all__'

# Inline for Clase and Horario
class ClaseInline(admin.TabularInline):
    model = Clase
    extra = 1

class HorarioInline(admin.TabularInline):
    model = Horario
    extra = 1

# Filter for filtering Clases by Professor
class ProfesorFilter(SimpleListFilter):
    title = 'Professor'
    parameter_name = 'profesor'

    def lookups(self, request, model_admin):
        profesores = CustomUser.objects.filter(tipo_usuario='profesor')
        return [(p.id, f"{p.first_name} {p.last_name}") for p in profesores]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(profesor__id=self.value())
        return queryset

# Admin for Clase with Professor and Estudiantes count
class ClaseAdmin(admin.ModelAdmin):
    inlines = [HorarioInline]
    list_display = ['nombre', 'institucion_link', 'profesor_link', 'estudiantes_count', 'id']
    search_fields = ['nombre', 'profesor__first_name', 'profesor__last_name', 'profesor__email']
    list_filter = [ProfesorFilter, 'institucion']

    def get_queryset(self, request):
        return super().get_queryset(request).annotate(estudiantes_count=Count('estudiantes'))

    def estudiantes_count(self, obj):
        return obj.estudiantes_count
    estudiantes_count.short_description = 'Students'
    estudiantes_count.admin_order_field = 'estudiantes_count'

    def profesor_link(self, obj):
        url = reverse("admin:ai_backend_customuser_change", args=[obj.profesor.id])
        return format_html('<a href="{}">{} {}</a>', url, obj.profesor.first_name, obj.profesor.last_name)
    profesor_link.short_description = 'Professor'
    profesor_link.admin_order_field = 'profesor__last_name'

    def institucion_link(self, obj):
        url = reverse("admin:ai_backend_institucion_change", args=[obj.institucion.id])
        return format_html('<a href="{}">{}</a>', url, obj.institucion.nombre)
    institucion_link.short_description = 'Institution'
    institucion_link.admin_order_field = 'institucion__nombre'


# Admin for UserProfile with ClaseInline
class UserProfileAdmin(admin.ModelAdmin):
    inlines = [ClaseInline]
    list_display = ('email', 'first_name', 'last_name', 'id')
    search_fields = ('first_name', 'last_name', 'email')
    list_filter = ('sexo',)

# Filter for filtering Institucion by type
class InstitucionTipoFilter(SimpleListFilter):
    title = 'Institution Type'
    parameter_name = 'tipo'

    def lookups(self, request, model_admin):
        return Institucion.TIPOS_INSTITUCION

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(tipo=self.value())
        return queryset

# Admin for Institucion with JSON upload capability
class InstitucionAdmin(admin.ModelAdmin):
    list_filter = [InstitucionTipoFilter]
    form = InstitucionAdminForm
    list_display = ['__str__', 'tipo', 'id']

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)

        json_file = form.cleaned_data.get('json_file')
        if json_file:
            try:
                data = json.load(json_file)
                with transaction.atomic():
                    import_json_data(data, obj, request)
                messages.success(request, "Institution and related data imported successfully.")
            except Exception as e:
                messages.error(request, f"Failed to import JSON data: {str(e)}")

# Filter for filtering Users by type
class UserTypeFilter(SimpleListFilter):
    title = 'User Type'
    parameter_name = 'tipo_usuario'

    def lookups(self, request, model_admin):
        tipos = set(CustomUser.objects.values_list('tipo_usuario', flat=True).distinct())
        return [(tipo, tipo.capitalize()) for tipo in tipos if tipo]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(tipo_usuario=self.value())
        return queryset

# CustomUser Admin with additional fields
class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser
    list_display = ['email', 'username', 'is_staff', 'first_name', 'last_name', 'tipo_usuario', 'profesion', 'id']
    fieldsets = UserAdmin.fieldsets + (
        (None, {'fields': ('profesion', 'fecha_nacimiento', 'sexo', 'tipo_usuario', 'foto')}),
    )
    list_filter = (UserTypeFilter,) + UserAdmin.list_filter

# Custom Actions for Documento
def delete_documents_and_embeddings(modeladmin, request, queryset):
    for documento in queryset:
        if documento.clase:
            item_id = documento.clase.id
            item_type = "clase"
        elif documento.hilo:
            item_id = documento.hilo.id
            item_type = "hilo"
        else:
            messages.error(request, "Documento does not have a valid clase_id or hilo_id.")
            continue

        documento_id = documento.id
        remove_documento_embedding(documento_id, item_id, item_type)
        documento.delete()

    messages.success(request, "Selected documents and their embeddings were successfully deleted.")

delete_documents_and_embeddings.short_description = "Delete selected documents and their embeddings"

def generate_embeddings(modeladmin, request, queryset):
    for documento in queryset:
        if documento.clase:
            context_id = f"clase_{documento.clase.id}"
            role = "profesor" if documento.clase.profesor == request.user else "alumno"
        elif documento.hilo:
            context_id = f"hilo_{documento.hilo.id}"
            role = "alumno" if documento.hilo.user == request.user else "profesor"
        else:
            messages.error(request, f"Documento {documento.id} does not have a valid clase or hilo.")
            continue

        uploaded_files_info = [{
            'file_path': documento.archivo.path,
            'file_name': documento.archivo.name,
            'file_type': documento.tipo,
        }]

        try:
            actualizar_main(pdf_inputs=uploaded_files_info, id=context_id, max_tokens=1000, role=role)
            messages.success(request, f"Successfully generated embedding for document {documento.id}.")
        except Exception as e:
            messages.error(request, f"Error generating embedding for document {documento.id}: {str(e)}")

generate_embeddings.short_description = "Generate embeddings for selected documents"

# Admin for Documento with custom actions and links
class DocumentoAdmin(admin.ModelAdmin):
    list_display = ['archivo_name', 'clase_link', 'hilo_link', 'tipo', 'fecha_subida', 'id']
    list_filter = ['clase', 'hilo', 'tipo', 'fecha_subida']
    search_fields = ['archivo', 'clase__nombre', 'hilo__id', 'tipo']
    date_hierarchy = 'fecha_subida'
    actions = [delete_documents_and_embeddings, generate_embeddings]
    readonly_fields = ['fecha_subida', 'hash']

    def archivo_name(self, obj):
        return obj.archivo.name
    archivo_name.short_description = 'File Name'

    def clase_link(self, obj):
        if obj.clase:
            url = reverse("admin:ai_backend_clase_change", args=[obj.clase.id])
            return format_html('<a href="{}">{}</a>', url, obj.clase)
        return "N/A"
    clase_link.short_description = 'Class'

    def hilo_link(self, obj):
        if obj.hilo:
            url = reverse("admin:ai_backend_hilo_change", args=[obj.hilo.id])
            return format_html('<a href="{}">{}</a>', url, obj.hilo)
        return "N/A"
    hilo_link.short_description = 'Thread'

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        if not change:  # Only for newly created documents
            generate_embeddings(self, request, [obj])

    def add_view(self, request, form_url='', extra_context=None):
        self.message_user(request, "New documents will automatically have embeddings generated upon creation.", level=messages.INFO)
        return super().add_view(request, form_url, extra_context)

    def change_view(self, request, object_id, form_url='', extra_context=None):
        self.message_user(request, "Editing documents here does not update embeddings. Use the 'Generate embeddings' action to update embeddings for modified documents.", level=messages.INFO)
        return super().change_view(request, object_id, form_url, extra_context)

# Inline for Mensaje and Hilo admin form
class MensajeInline(admin.StackedInline):
    model = Mensaje
    extra = 0
    readonly_fields = ['timestamp']
    fields = ['texto', 'es_del_bot', 'timestamp']

class HiloAdminForm(forms.ModelForm):
    new_message = forms.CharField(label="New Message to Sabio", required=False, widget=forms.Textarea(attrs={'rows': 4, 'cols': 40}))

    class Meta:
        model = Hilo
        fields = '__all__'

# Admin for Hilo with custom save and response behavior
class HiloAdmin(admin.ModelAdmin):
    form = HiloAdminForm
    list_display = ['id', 'clase_link', 'user_link', 'fecha_creacion', 'ultima_actualizacion', 'mensaje_count']
    list_filter = ['clase', 'user', 'fecha_creacion']
    search_fields = ['id', 'clase__nombre', 'user__username', 'user__email']
    readonly_fields = ['fecha_creacion', 'ultima_actualizacion']
    inlines = [MensajeInline]

    def get_queryset(self, request):
        return super().get_queryset(request).annotate(mensaje_count=Count('mensajes'))

    def mensaje_count(self, obj):
        return obj.mensaje_count
    mensaje_count.short_description = 'Messages'
    mensaje_count.admin_order_field = 'mensaje_count'

    def clase_link(self, obj):
        url = reverse("admin:ai_backend_clase_change", args=[obj.clase.id])
        return format_html('<a href="{}">{}</a>', url, obj.clase)
    clase_link.short_description = 'Class'
    clase_link.admin_order_field = 'clase__nombre'

    def user_link(self, obj):
        if obj.user:
            url = reverse("admin:ai_backend_customuser_change", args=[obj.user.id])
            return format_html('<a href="{}">{}</a>', url, obj.user)
        return "N/A"
    user_link.short_description = 'User'
    user_link.admin_order_field = 'user__username'

    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        new_message = form.cleaned_data.get('new_message')
        if new_message:
            chatbot_main(obj.id, new_message)

    def response_change(self, request, obj):
        response = super().response_change(request, obj)
        if "_save" in request.POST:
            return HttpResponseRedirect(f'{request.path}#mensaje-set-group')
        return response

    def response_add(self, request, obj, post_url_continue=None):
        response = super().response_add(request, obj, post_url_continue)
        if "_save" in request.POST:
            return HttpResponseRedirect(f'{request.path}{obj.pk}/change/#mensaje-set-group')
        return response

# Admin for ExamResult with custom display fields
class ExamResultAdmin(admin.ModelAdmin):
    list_display = ['exam_title', 'user', 'grading_result_display']
    search_fields = ['exam__title', 'user__username']
    readonly_fields = ['grading_result']

    def exam_title(self, obj):
        return obj.exam.title
    exam_title.admin_order_field = 'exam__title'
    exam_title.short_description = 'Exam Title'

    def grading_result_display(self, obj):
        return obj.grading_result
    grading_result_display.short_description = 'Grading Result'

# Inline for ExamCorrectionTrainingFile and ExamAdmin
class ExamCorrectionTrainingFileInline(admin.TabularInline):
    model = ExamCorrectionTrainingFile
    extra = 1

@admin.register(Exam)
class ExamAdmin(admin.ModelAdmin):
    list_display = ['title', 'clase', 'institucion_link', 'professor', 'created_at']
    list_filter = ['clase', 'professor', 'created_at']
    search_fields = ['title', 'professor__username', 'clase__nombre']
    readonly_fields = ['created_at']
    inlines = [ExamCorrectionTrainingFileInline]

    def institucion_link(self, obj):
        url = reverse("admin:ai_backend_institucion_change", args=[obj.clase.institucion.id])
        return format_html('<a href="{}">{}</a>', url, obj.clase.institucion.nombre)
    institucion_link.short_description = 'Institution'
    institucion_link.admin_order_field = 'clase__institucion__nombre'

    fieldsets = (
        (None, {'fields': ('title', 'clase', 'professor')}),
        ('Timestamps', {'fields': ('created_at',), 'classes': ('collapse',)}),
    )

# Customizing admin site header and title
admin.site.site_header = "SABIO Admin"
admin.site.site_title = "SABIO Admin Portal"
admin.site.index_title = "Welcome to the SABIO Portal"

# Registering models with the admin site
admin.site.register(Institucion, InstitucionAdmin)
admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(Clase, ClaseAdmin)
admin.site.register(Hilo, HiloAdmin)
admin.site.register(Documento, DocumentoAdmin)
admin.site.register(ExamResult, ExamResultAdmin)


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/utils.py:

import os

def read_system_prompt(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            system_prompt = file.read()
        return system_prompt
    except Exception as e:
        print(f"Failed to read system prompt file: {e}")
        return None


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/clients.py:

from openai import OpenAI
import os
import sys
import requests
import django

from dotenv import load_dotenv
load_dotenv()

wd = os.getcwd()
sys.path.append(wd + "/ai_backend")
from ai_backend.utils import read_system_prompt

openai_api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_api_key)

def create_embeddings(text_chunks):
    embedding_responses = client.embeddings.create(
        input=text_chunks,
        model='text-embedding-ada-002'
    )
    return embedding_responses

def create_completion(messages, model, max_tokens, tools=None, tool_choice=None, response_format=None):
    """
    Creates a completion using the OpenAI API based on the provided parameters.
    """

    params = {
        "model": model,
        "messages": messages,
        "max_tokens": max_tokens
    }
    if tools is not None:
        params["tools"] = tools
    if tool_choice is not None:
        params["tool_choice"] = tool_choice
    if response_format is not None:
        params["response_format"] = response_format

    completion = client.chat.completions.create(**params)
    return completion


def create_vision_completion(base64_image, prompt):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {openai_api_key}"
    }
    payload = {
        "model": "gpt-4-vision-preview",
        "messages": [
            {
               "role": "system",
                "content": read_system_prompt(filename="ai_backend/sabio/sysprompts/pdfvision.md")
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": prompt
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}",
                            "detail": "low"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 300
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    completion = response.json()
    return completion
  
def extract_exam_data(base64_frames, user_prompt_type):
    system_prompt = read_system_prompt(filename='ai_backend/sabio/sysprompts/exam_vision.md')
    if user_prompt_type == "sample":
        user_prompt = "Here are the images of a sample exemplary test, extract all the text you see, which will be used as reference to mark/grade student answered exams."
    elif user_prompt_type == "student":
        user_prompt = "Here are the images of a student answered test, extract all the text you see in order for another AI separate from you (trained on the correct answers) to grade it."

    messages = [
        {
            "role": "system",
            "content": system_prompt
        },
        {
            "role": "user",
            "content": [
                {"type": "text", "text": f"{user_prompt}"},
                *map(lambda x: {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{x}", "detail": "high"}}, base64_frames[0::50]),
            ],
        },
    ]

    model = 'gpt-4o-mini'
    max_tokens = 16384

    # Here response_format is passed explicitly, check the value before passing
    response_format = {"type": "json_object"}


    visual_description = create_completion(messages, model, max_tokens, response_format=response_format)
    print("visual description:", visual_description)


    return visual_description



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/tests.py:

# tests.py

from django.test import TestCase


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/urls.py:

from django.urls import path, include
from ai_backend import views
from ai_backend.views import HomeView, UploadExemplaryExamView, CreateExamView, LoginView, ViewExamView, UserDetailView, DocumentUploadView, lista_documentos, eliminar_documento, ListaHilosView, DetalleHiloView, ListaAlumnosClaseView, ListaClasesProfesorView, csrf, LogoInstitucionView, landing_page, serve_protected_media, CustomTokenObtainPairView, ExamUploadView, ExamSuccessView
from django.conf.urls.static import static
from django.conf import settings
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns = [
    path('landing/', landing_page, name='landing_page'),
    path('accounts/login/', LoginView.as_view(), name='login'), 
    path('documents/', DocumentUploadView.as_view(), name='document_upload'),
    path('documents/list_documents/class/', lista_documentos, {'doc_type': 'class'}, name='list_class_documents'),
    path('documents/list_documents/chat/', lista_documentos, {'doc_type': 'chat'}, name='list_chat_documents'),
    path('documents/eliminar_documento/', eliminar_documento, name='eliminar_documento'),
    path('class/students/', ListaAlumnosClaseView.as_view(), name='lista_alumnos_clase'),
    path('educator/clases/', ListaClasesProfesorView.as_view(), name='lista_clases_profesor'),
    path('chat/hilos/', ListaHilosView.as_view(), name='lista_hilos'),
    path('chat/crear_hilo/', views.crear_hilo, name='crear_hilo'),
    path('chat/eliminar_hilo/', views.eliminar_hilo, name='eliminar_hilo'),
    path('hilo/', DetalleHiloView.as_view(), name='detalle_hilo_mensajes'),
    path('institucion/logo/', LogoInstitucionView.as_view(), name='logo_institucion'),
    path('upload/profile-picture/', views.ProfilePictureView.as_view(), name='profile_picture'),

    path('add_student/', views.add_student_to_class, name='add_student_to_class'),
    path('get_student_hilo_documents_per_class/', views.get_student_hilo_documents_per_class, name='get_student_hilo_documents_per_class'),

    path('home/', HomeView.as_view(), name='home'),
    path('', HomeView.as_view(), name='home'),
    path('upload-exam/<int:exam_id>/', ExamUploadView.as_view(), name='upload_exam_file'),
    path('upload-exam/<int:exam_id>/<int:student_id>/', ExamUploadView.as_view(), name='upload_student_exam'),
    path('exam/<int:exam_id>/', ViewExamView.as_view(), name='view_exam'),
    path('exam_success/<int:exam_id>/', ExamSuccessView.as_view(), name='exam_success'),
    path('create-exam/<int:class_id>/', CreateExamView.as_view(), name='create_exam'),
    path('exam/<int:exam_id>/upload-exemplary/', UploadExemplaryExamView.as_view(), name='upload_exemplary_exam'),
    
    path('preguntale_al_sabio/', views.ChatbotAPIView.as_view(), name='chatbot_api'),

    path('api/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/user/', UserDetailView.as_view(), name='user_detail'),
    path('csrf/', csrf, name='csrf_view'),
    path('media/<path:file_path>', serve_protected_media, name='serve_protected_media'),
    path('accounts/', include('django.contrib.auth.urls')),

]

# REMOVE IN PRODUCTION
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views.py:

# Auth views
from .views.auth_views import (
    CustomTokenObtainPairView, 
    LoginView, 
    UserDetailView
)

# Document views
from .views.document_views import (
    serve_protected_media, 
    DocumentUploadView, 
    lista_documentos, 
    eliminar_documento
)

# Class views
from .views.class_views import (
    get_student_hilo_documents_per_class,
    add_student_to_class, 
    ListaAlumnosClaseView, 
    ListaClasesProfesorView
)

# Exam views
from .views.exam_views import (
    ExamUploadView, 
    UploadExemplaryExamView, 
    ExamSuccessView, 
    HomeView, 
    CreateExamView, 
    ViewExamView
)

# Thread views
from .views.thread_views import (
    crear_hilo, 
    eliminar_hilo, 
    DetalleHiloView, 
    ListaHilosView
)

# Utility views
from .views.utility_views import (
    csrf, 
    landing_page,
    LogoInstitucionView,  
    ProfilePictureView,
    ChatbotAPIView
)



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/storages.py:

import os
import hashlib
from django.utils.text import slugify
from django.conf import settings
import uuid

class CustomStorage:
    def get_available_name(self, name, max_length=None):
        """
        Ensure the directory exists before generating an available name.
        """
        dir_name = os.path.dirname(name)
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)

        if max_length and len(name) > max_length:
            name = name[:max_length]

        original_name = name
        counter = 1
        while os.path.exists(name):
            name, ext = os.path.splitext(original_name)
            name = f"{name}_{counter}{ext}"
            counter += 1

        return name

    def _get_file_hash(self, file):
        """
        Generate a hash for the given file content.
        """
        hasher = hashlib.md5()
        for chunk in file.chunks():
            hasher.update(chunk)
        return hasher.hexdigest()

    def _find_existing_file_by_hash(self, file_hash, role, context_instance, exclude_instance=None):
        """
        Check if a file with the given hash already exists in the database.
        Exclude the current instance if provided to avoid false positives.
        Return the Documento instance if found, otherwise return None.
        """
        from ai_backend.models import Documento
        queryset = Documento.objects.filter(hash=file_hash)

        if exclude_instance:
            queryset = queryset.exclude(pk=exclude_instance.pk)

        if role == "class_training":
            return queryset.filter(clase=context_instance).first()
        elif role == "chat_doc":
            return queryset.filter(hilo=context_instance).first()

        return None

    def documento_upload_to(self, instance, filename):
        """
        Generate the upload path based on the related model instance.
        Ensure the filename is unique using get_available_name.
        """
        if hasattr(instance, 'clase') and instance.clase:
            professor_id = instance.clase.profesor.id
            professor_name = f"{instance.clase.profesor.first_name}_{instance.clase.profesor.last_name}".replace(" ", "_")
            class_id = instance.clase.id
            path = f'documents/{professor_name}_id-{professor_id}/clase_id-{class_id}/{filename}'
        elif hasattr(instance, 'hilo') and instance.hilo:
            student_id = instance.hilo.user.id
            student_name = f"{instance.hilo.user.first_name}_{instance.hilo.user.last_name}".replace(" ", "_")
            hilo_id = instance.hilo.id
            path = f'documents/{student_name}_id-{student_id}/hilo_id-{hilo_id}/{filename}'
        else:
            path = f'documents/{filename}'

        return self.get_available_name(path)

    def save_document(self, instance, file, role):
        """
        Save the document, avoiding duplicates by checking file hash.
        """
        file_hash = self._get_file_hash(file)

        # Check for existing file with the same hash, excluding the current instance
        existing_doc = self._find_existing_file_by_hash(file_hash, role, instance, exclude_instance=instance)
        if existing_doc:
            return existing_doc.archivo  # Return the existing file's FileField instance

        # Save the new file
        path = self.documento_upload_to(instance, file.name)
        full_path = os.path.join(settings.MEDIA_ROOT, path)
        with open(full_path, 'wb') as destination:
            for chunk in file.chunks():
                destination.write(chunk)

        # Update instance fields
        instance.archivo.name = path
        instance.hash = file_hash

        return instance.archivo  # Return the FileField instance

    def user_profile_image_path(self, instance, filename):
        extension = filename.split('.')[-1]
        filename = f'{uuid.uuid4().hex}.{extension}'
        return f'avatar/{instance.username}/{filename}'


    def institucion_logo_path(self, instance, filename):
        institucion_name_slug = slugify(instance.nombre)
        return f'logos/{institucion_name_slug}/{filename}'



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/migrations/__init__.py:




/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/migrations/0003_clase_institucion_customuser_institucion_and_more.py:

# Generated by Django 5.1 on 2024-08-21 03:33

import ai_backend.storages
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ai_backend', '0002_alter_institucion_logo'),
    ]

    operations = [
        migrations.AddField(
            model_name='clase',
            name='institucion',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='clases', to='ai_backend.institucion'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='customuser',
            name='institucion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios', to='ai_backend.institucion'),
        ),
        migrations.AlterField(
            model_name='institucion',
            name='logo',
            field=models.ImageField(blank=True, null=True, upload_to=ai_backend.storages.CustomStorage.institucion_logo_path),
        ),
    ]



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/migrations/0002_alter_institucion_logo.py:

# Generated by Django 5.1 on 2024-08-21 03:23

import ai_backend.storages
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ai_backend', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='institucion',
            name='logo',
            field=models.ImageField(blank=True, null=True, upload_to=ai_backend.storages.CustomStorage.institucion_logo_path),
        ),
    ]



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/migrations/0001_initial.py:

# Generated by Django 5.1 on 2024-08-20 21:46

import ai_backend.models
import ai_backend.storages
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Institucion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255)),
                ('direccion', models.CharField(blank=True, max_length=255, null=True)),
                ('tipo', models.CharField(choices=[('PRIMARIA', 'Primaria'), ('SECUNDARIA', 'Secundaria'), ('UNIVERSIDAD', 'Universidad'), ('COLEGIO', 'Colegio'), ('OTRO', 'Otro')], max_length=50)),
                ('contacto_nombre', models.CharField(blank=True, max_length=255, null=True)),
                ('contacto_correo', models.EmailField(blank=True, max_length=254, null=True)),
                ('contacto_telefono', models.CharField(blank=True, max_length=20, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to=ai_backend.storages.CustomStorage.institucion_logo_path)),
                ('color', models.CharField(default='#009DDC', max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profesion', models.CharField(blank=True, max_length=100, null=True)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('sexo', models.CharField(blank=True, choices=[('F', 'Femenino'), ('M', 'Masculino')], max_length=1, null=True)),
                ('tipo_usuario', models.CharField(blank=True, choices=[('alumno', 'Alumno'), ('profesor', 'Profesor')], max_length=10, null=True)),
                ('foto', models.ImageField(blank=True, null=True, upload_to=ai_backend.storages.CustomStorage.user_profile_image_path)),
                ('has_temporary_password', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('estudiantes', models.ManyToManyField(blank=True, related_name='clases_as_student', to=settings.AUTH_USER_MODEL)),
                ('profesor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clases', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Documento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archivo', models.FileField(upload_to=ai_backend.models.Documento.documento_upload_path)),
                ('tipo', models.CharField(max_length=50)),
                ('fecha_subida', models.DateTimeField(auto_now_add=True)),
                ('hash', models.CharField(blank=True, max_length=32, null=True)),
                ('clase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documentos', to='ai_backend.clase')),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='ai_backend.clase')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExamCorrectionTrainingFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_backend.documento')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exemplary_files', to='ai_backend.exam')),
            ],
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grading_result', models.JSONField()),
                ('additional_feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_backend.exam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hilo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_creacion', models.DateTimeField(default=django.utils.timezone.now)),
                ('ultima_actualizacion', models.DateTimeField(auto_now=True)),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_backend.clase')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hilos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='documento',
            name='hilo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documentos', to='ai_backend.hilo'),
        ),
        migrations.CreateModel(
            name='Horario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='horarios', to='ai_backend.clase')),
            ],
        ),
        migrations.CreateModel(
            name='Mensaje',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.TextField()),
                ('es_del_bot', models.CharField(choices=[('system', 'System'), ('assistant', 'Assistant'), ('user', 'User')], max_length=9)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('hilo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mensajes', to='ai_backend.hilo')),
            ],
        ),
    ]



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/management/__init__.py:




/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/management/commands/chromadb.py:

from django.core.management.base import BaseCommand
import chromadb_setup  # Adjust your import based on actual project structure
from django.core.management import CommandError

class Command(BaseCommand):
    help = 'Manage ChromaDB operations'

    def add_arguments(self, parser):
        # Adding named (optional) arguments
        parser.add_argument('-l', '--list', action='store_true', help='List all collections')
        parser.add_argument('-r', '--read', type=str, help='Read a collection by clase_id. Requires clase_id as argument.')
        parser.add_argument('-s', '--setup', action='store_true', help='Setup collections')
        parser.add_argument('-reset', '--reset', type=str, help='Reset a collection by clase_id. Requires clase_id as argument.')
        parser.add_argument('--restore', action='store_true', help='Restore database. Use with caution!')
        parser.add_argument('-t', '--type', type=str, default='clase', choices=['clase', 'hilo'], help='Specify the type of collection to operate on: clase or hilo.')

    def handle(self, *args, **options):
        item_type = options['type']
        if options['list']:
            chromadb_setup.list_collections()
            self.stdout.write(self.style.SUCCESS('Listed all collections.'))
        elif options['read']:
            if not options['type']:
                raise CommandError('The --read option requires the --type option to specify "clase" or "hilo".')
            item_id = options['read']
            item_type = options['type']
            chromadb_setup.read_collection_by_id(item_id=item_id, item_type=item_type)
            self.stdout.write(self.style.SUCCESS(f'Read collection for {item_type}_id: {item_id}.'))
        elif options['setup']:
            chromadb_setup.setup_collections()
            self.stdout.write(self.style.SUCCESS('Setup collections.'))
        elif options['reset']:
            clase_id = options['reset']
            chromadb_setup.reset_collection_by_clase_id(clase_id=clase_id)
            self.stdout.write(self.style.SUCCESS(f'Reset collection for clase_id: {clase_id}.'))
        elif options['restore']:
            # Adding confirmation step for the restore operation
            self.stdout.write(self.style.WARNING('WARNING: This operation will restore the chroma database and cannot be undone.'))
            proceed = input('Are you sure you want to proceed? (yes/no): ')
            if proceed.lower() == 'yes':
                chromadb_setup.restore_database()
                self.stdout.write(self.style.SUCCESS('Database restored.'))
            else:
                self.stdout.write(self.style.SUCCESS('Operation canceled.'))
        else:
            self.stdout.write(self.style.ERROR('No valid command selected.'))


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/management/commands/__init__.py:




/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/management/commands/envia_emails_reset_password.py:

from django.core.management.base import BaseCommand
from django.core.mail import send_mail
from django.contrib.auth import get_user_model
from django.contrib.auth.tokens import default_token_generator
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.template.loader import render_to_string

User = get_user_model()  # Obtener el modelo de usuario personalizado

class Command(BaseCommand):
    help = 'Envía emails para restablecer la contraseña a todos los usuarios activos.'

    def handle(self, *args, **options):
        usuarios = User.objects.filter(is_active=True)
        for usuario in usuarios:
            self.enviar_email_reset_password(usuario)
            self.stdout.write(self.style.SUCCESS(f'Correo de restablecimiento enviado a: {usuario.email}'))

    def enviar_email_reset_password(self, usuario):
        subject = "Restablece tu contraseña"
        email_template_name = "password_reset_email.html"
        context = {
            'email': usuario.email,
            'domain': 'your-domain.com',  # Asegúrate de cambiar esto por tu dominio real.
            'site_name': 'Nombre de tu Sitio',
            'uid': urlsafe_base64_encode(force_bytes(usuario.pk)),
            'user': usuario,
            'token': default_token_generator.make_token(usuario),
            'protocol': 'http',
        }
        
        email = render_to_string(email_template_name, context)
        send_mail(subject, email, None, [usuario.email], fail_silently=False)



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/sabio/student/chatbot.py:

import tiktoken
import psycopg2
from dotenv import load_dotenv
import os
import numpy as np
import json
from ai_backend.clients import create_embeddings, create_completion
import sys
import logging
from ai_backend.models import Mensaje, Hilo, Clase
from django.utils import timezone 
from ...clients import create_embeddings
from django.shortcuts import get_object_or_404

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

wd = os.getcwd()
sys.path.append(wd + "/backend")

from chromadb_setup import find_similar_embeddings_by_class

load_dotenv()

def open_sys_prompt():
    wd = os.getcwd()
    print(wd)
    # Construct the path to sysPrompt.md
    sys_prompt_path = os.path.join(wd, 'ai_backend/sabio/sysprompts/chatbot.md')
    # Read the contents of sysPrompt.md
    with open(sys_prompt_path, 'r') as file:
        sys_prompt_content = file.read()
        return sys_prompt_content
    
def token_limit_messages(messages, token_limit, tools, protect_initial=False):
    """
    Manage an array of message objects to ensure the total token count remains under a specified limit.
    Optionally protects the initial system prompt from being removed.
    
    :param messages: Array of message objects, each with 'role' and 'messageContent'
    :param token_limit: The maximum allowed token count
    :param protect_initial: Boolean indicating whether to protect the initial system message
    :return: Updated array of message objects
    """
    enc = tiktoken.encoding_for_model("gpt-4")
    total_tokens = 0
    if tools is not None:
        tools_str = json.dumps(tools)
        total_tokens += len(enc.encode(tools_str))

    # Calculate tokens
    total_tokens += sum(len(enc.encode(str(message['messageContent']))) for message in messages)

    print('Initial total tokens (including tools):', total_tokens)
    removed_timestamps = []

    # Exclude the first system message from being removed if protect_initial is True
    start_index = 1 if protect_initial else 0

    # Remove oldest messages if total token count exceeds the limit
    while total_tokens > token_limit and len(messages) > start_index:
        removed_message = messages.pop(start_index)  # Modify to pop from start_index, protecting the first if needed
        total_tokens -= len(enc.encode(removed_message['messageContent']))
        removed_timestamps.append(removed_message['timestamp'])

    return messages, removed_timestamps

def fetch_messages_by_hilo_id(hilo_id):
    # Assuming Django ORM is used to fetch related messages
    return Mensaje.objects.filter(hilo_id=hilo_id).order_by('timestamp').values('texto', 'es_del_bot', 'timestamp')

def completion_tools(tool_choice):
    if tool_choice == 'none':
        tools=None
        tool_choice=None
    else:
        tools=[
            {
                "type": "function",
                "function": {
                    "name": "semanticSearch",
                    "description": f"Usa esta herramienta para realizar una búsqueda con el SABIO search engine para encontrar contexto relevante de los datos subidos por los profesores, como apuntes, contenidos de libros, diapositivas y programas de estudio. Es importante utilizar esta herramienta para poder responder al estudiante con contexto del material de la clase. Es vital responder al estudiante con ese contexto para facilitar su comprensión y aprendizaje. Simplemente escribe un query y obten el contexto necesario!",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "Aquí ingresa tu consulta de búsqueda"
                            }
                        }
                    }
                }
            },
        ]
        tool_choice='auto'
    return tools, tool_choice

def manage_messages(hilo_id, user_message, max_tokens, tools):
    # Fetch messages from the database for the given hilo_id
    raw_messages = fetch_messages_by_hilo_id(hilo_id)

    # Transform raw_messages to the expected format
    messages = [
        {'messageContent': msg['texto'], 'role': 'system' if msg['es_del_bot'] and 'SYSTEM' in msg['texto'] else 'assistant' if msg['es_del_bot'] else 'user',
         'timestamp': msg['timestamp']}
        for msg in raw_messages
    ]

    # Fetch the system prompt content and prepend it
    sys_prompt = open_sys_prompt()
    initial_system_message = {'messageContent': sys_prompt, 'role': 'system', 'timestamp': 'initial'}
    messages.insert(0, initial_system_message)

    # Add the latest incoming message from the user to the messages list
    messages.append({'messageContent': user_message, 'role': 'user', 'timestamp': 'latest'})

    # Process the messages to ensure they don't exceed the token limit
    token_limited_messages, removed_timestamps = token_limit_messages(messages, max_tokens, tools, protect_initial=True)

    # Format messages for the completion function
    formatted_messages = [
        {"role": message['role'], "content": message['messageContent']}
        for message in token_limited_messages
    ]

    return formatted_messages

def add_message_to_hilo(hilo_id, texto, es_del_bot):
    """
    Adds a message to the Mensaje model for a given hilo.

    Args:
    hilo_id (int): The ID of the Hilo to which the message belongs.
    texto (str): The text content of the message.
    es_del_bot (bool): Flag indicating if the message is from the bot (True) or the user (False).
    """
    # Fetch the Hilo instance by its ID
    try:
        hilo = Hilo.objects.get(id=hilo_id)
    except Hilo.DoesNotExist:
        logging.error(f"Hilo with ID {hilo_id} does not exist.")
        return None

    # Create a new Mensaje instance and save it
    mensaje = Mensaje(
        hilo=hilo,
        texto=texto,
        es_del_bot=es_del_bot,
        timestamp=timezone.now()  # Use the current time for the timestamp
    )
    mensaje.save()
    logging.info(f"Message added to Hilo ID {hilo_id}: '{texto}' (Message Role: {es_del_bot})")
    return mensaje

def completion_loop(hilo_id, incoming_message, max_tokens, tools, model, tool_choice, role):
    messages = manage_messages(hilo_id, incoming_message, max_tokens, tools)
    add_message_to_hilo(hilo_id, incoming_message, role)
    response_format = None
    completion = create_completion(messages, model, max_tokens, tools, tool_choice, response_format)
    response_text = completion.choices[0].message.content

    if completion.choices[0].message.tool_calls:
        function_call = completion.choices[0].message.tool_calls[0].function.arguments
    
    if response_text:
        response_type = "response_text"
        add_message_to_hilo(hilo_id, response_text, 'assistant')
        logging.info("SABIO wants to respond to user")
        return response_text, response_type
    if function_call:
        response_type = "function_call"
        function_name = completion.choices[0].message.tool_calls[0].function.name
        function_call = {"function_name": function_name, "arguments": function_call}
        add_message_to_hilo(hilo_id, function_call, 'assistant')
        logging.info("SABIO wants to perform a search")
        return function_call, response_type
    

def main(hilo_id, user_message):
    model="gpt-4o-mini"
    max_tokens = 4096

    tool_choice = 'auto'
    tools, tool_choice = completion_tools(tool_choice)

    role = "user"
    completion, response_type = completion_loop(hilo_id, user_message, max_tokens, tools, model, tool_choice, role)

    response_text = completion

    if response_type == "function_call":
        function_name = completion["function_name"]
        arguments_dic = json.loads(completion["arguments"])
        if function_name == "semanticSearch":
            query_embedding_response = create_embeddings(arguments_dic["query"])
            query_embedding = query_embedding_response.data[0].embedding

            hilo = get_object_or_404(Hilo, id=hilo_id)
            clase_id = hilo.clase.id

            similarity = find_similar_embeddings_by_class(query_embedding, clase_id, 3)

        tool_choice = 'none'
        tools, tool_choice = completion_tools(tool_choice)

        role = "system"
        completion = completion_loop(hilo_id, f"RESULTADOS DE BUSQUEDA PARA RESPONDER AL ESTUDIANTE:\n\n{similarity}", max_tokens, tools, model, tool_choice, role)

        response_text = completion
    return response_text



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/sabio/sysprompts/pdfvision.md:

As an AI system, your task is to distill key information and insights from screenshots of in-class material, preparing the content not for direct student consumption, but for semantic analysis by other large language models (LLMs) like yourself. Your analysis should focus on extracting and detailing information from both text and, importantly, from visual elements such as images, graphs, charts, and other non-text objects within the slides. Your descriptions of these elements must be detailed and structured in a way that other LLMs can easily parse and understand, emphasizing details crucial for an in-depth understanding of the subject matter.

When the material is text-heavy, you're not to transcribe it verbatim. Instead, you're to highlight and explain the significance of information that necessitates visual aids—charts, diagrams, images—to be fully comprehended. Your output should be semantic-rich, enabling other LLMs to perform effective searches and analyses within the in-class material, thereby facilitating a deeper understanding of the concepts being taught. However do keep in mind that in cases where you do extract some kind of information, try to say all the relevant things about it the student should know at any point throughout the class year. 

Your goal is to structure your output in a semantically coherent and accessible format for other LLMs. This involves identifying and interpreting key themes, patterns, and data within visual representations and translating this information into a context that enhances the LLMs' ability to support students' learning. Through your detailed analysis, you contribute to a layered knowledge base, enabling other LLMs to retrieve and present information that addresses specific student queries or needs, thereby enriching the educational experience. Use context from the session to extract the most relevant data.


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/sabio/sysprompts/chatbot.md:

## Identidad y Propósito

- **Nombre**: SABIO
- **Tipo**: Asistente Educacional
- **Misión**: Facilitar un aprendizaje autónomo y reflexivo, empoderando a los estudiantes para ser curiosos, críticos, y autodidactas.

## Capacidades y Enfoque

- **Conocimiento de Material**: Para responder efectivamente teniendo el contexto relevante del material que el profesor subio a la clase, SABIO puede realizar búsquedas semánticas simplemente en JSON usando la herramienta semanticSearch y obtendras chunks relevantes de: sílabos, slides, libros, notas, practicas, etc.
- **Orientación al Aprendizaje**: Centrado en mejorar la comprensión y facilitar el acceso a recursos educativos.
- **Contexto**: Se limita a temas académicos y educativos.
- **Habilidades**: SabIO tiene distintas habilidades cada una accesible mediante su respectivo tool, SabIO responde en JSON para utilizarlos.

# Comportamiento Esperado

- **Claridad en Comunicación**: Respuestas basadas en la información de documentos de curso, claras y precisas.
- **Feedback Constructivo**: Retroalimentación orientada a la mejora continua del estudiante.
- **Voz y Tono**: Profesional, amigable, y accesible a todos los estudiantes.

# Habilidades Específicas a Traves de Tools / Function Calling

- **"semanticSearch"**: Utiliza la herramienta de búsqueda semántica para realizar consultas precisas y contextualizadas. Es esencial emplear esta herramienta para responder de manera efectiva y con contexto relevante del material de la clase, facilitando así la comprensión y aprendizaje del estudiante. El unico input necesario de esta herramienta es el query de busqueda.
- **Función Calculadora**: Preparación previa de la estructura del problema, con variables definidas.

# Métodos de Enseñanza

- **Enfoque Personalizado**: Adaptación a estilos de aprendizaje individuales, promoviendo la comprensión profunda y el aprendizaje activo.
- **Tareas y Evaluaciones**: Claridad en las instrucciones y expectativas.
- **Apoyo y Flexibilidad**: Ajuste a las necesidades y ritmos de aprendizaje de cada estudiante.

# Iniciativas para el Aprendizaje

- **Personalización y Herramientas Interactivas**: Planes de estudio personalizados e integración de recursos multimedia.
- **Fomento de la Discusión**: Creación de espacios para el intercambio de ideas y aprendizaje colaborativo.
- **Uso de Recursos Externos**: Motivación para explorar fuentes de aprendizaje adicionales.

# Seguridad y Ética

- **Enfoque Proactivo en Seguridad**: Medidas avanzadas para la protección de datos y privacidad.
- **Educación sobre Seguridad**: Información clara sobre prácticas seguras y recomendaciones para mantener un entorno seguro.
- **Rol de Guardianía**: Integridad de la información y colaboración con el equipo educativo para prácticas de seguridad.

# Comportamiento y Ética

- **Asistencia Proactiva y Sensibilidad Contextual**: Identificación de necesidades de aprendizaje y adaptación al contexto.
- **Promoción de la Honestidad Académica**: Orientación para el desarrollo de habilidades de investigación y análisis.


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/sabio/sysprompts/exam_grader.md:

# Asistente de Calificación de Exámenes con IA

## Declaración de Misión
Tu tarea es evaluar y calificar las respuestas de los estudiantes en un examen, basándote en un conjunto de respuestas ejemplares proporcionadas por el profesor. Las respuestas ejemplares representan las respuestas ideales que recibirían una puntuación completa. Debes comparar las respuestas de los estudiantes con estas respuestas ejemplares, identificar discrepancias, asignar puntuaciones y proporcionar retroalimentación. Tu salida debe estar estructurada y ser legible por máquinas para asegurar consistencia y claridad.

## Antecedentes Teóricos
Las respuestas ejemplares sirven como referencia para evaluar la corrección y calidad de las respuestas de los estudiantes. Al alinear las respuestas de los estudiantes con las respuestas ejemplares proporcionadas, se asegura que la calificación sea objetiva y consistente. El objetivo es proporcionar una evaluación precisa del entendimiento del estudiante e identificar áreas de mejora.

## Metodología Detallada
1. **Estructura de Entrada**:
    - **Respuestas Ejemplares**: Un conjunto de respuestas ideales proporcionadas por el profesor, cada una asociada con una pregunta específica.
    - **Respuestas de los Estudiantes**: Las respuestas del estudiante al mismo conjunto de preguntas, sin correcciones previas.

2. **Proceso de Comparación**:
    - Para cada pregunta, compara la respuesta del estudiante con la respuesta ejemplar correspondiente.
    - Evalúa la respuesta en función de la exactitud, completitud y adherencia a los puntos clave indicados en la respuesta ejemplar.

3. **Criterios de Calificación**:
    - Asignar puntuaciones basadas en el nivel de alineación con la respuesta ejemplar. Utilizar una escala del 0 al 100%, donde el 100% representa una respuesta idéntica a la respuesta ejemplar.
    - Se debe otorgar crédito parcial para respuestas correctas pero incompletas o faltas de detalles en comparación con la respuesta ejemplar.

4. **Generación de Retroalimentación**:
    - Resaltar los aspectos correctos de la respuesta del estudiante.
    - Señalar discrepancias, omisiones o inexactitudes en relación con la respuesta ejemplar.
    - Proporcionar retroalimentación constructiva y sugerencias para mejorar.

## Structured Output
Output the results in the following JSON format:

```json
{
  "results": [
    {
      "question_id": "<ID or number>",
      "student_score": "<Percentage>",
      "feedback": {
        "correct": "<List of correct elements>",
        "incorrect": "<List of incorrect/missing elements>",
        "suggestions": "<Suggestions for improvement>"
      }
    },
    // Repeat for each question / problem
  ],
  "overall_score": "<Average percentage score>",
  "summary_feedback": "<General comments on student's performance>"
}



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/sabio/sysprompts/exam_vision.md:

# System Prompt: Modelo de Extracción de Texto e Imagen

## Declaración de Misión
Tu tarea es extraer y transcribir todo el contenido textual y gráfico de imágenes de páginas de exámenes. Esto incluye texto, imágenes, gráficos, diagramas y cualquier otro contenido relevante. La información extraída debe presentarse en un formato estructurado y legible por máquinas, asegurando que cada detalle se capture con precisión. El resultado de este proceso servirá como entrada para un análisis y calificación en pasos posteriores.

## Antecedentes Teóricos
La extracción precisa de texto y elementos gráficos de imágenes es crucial para el procesamiento y análisis automatizado. Al convertir contenido visual en un formato textual estructurado, los modelos subsiguientes pueden interpretar y utilizar los datos de manera efectiva. Este paso es fundamental para asegurar que toda la información relevante se capture de las páginas de exámenes para propósitos de calificación y retroalimentación.

## Metodología Detallada
1. **Estructura de Entrada**:
    - **Imágenes de Exámenes**: Imágenes de alta calidad de páginas de exámenes, incluyendo preguntas, respuestas, diagramas, gráficos y otros contenidos.

2. **Proceso de Extracción**:
    - **Extracción de Texto**:
      - Utilizar Reconocimiento Óptico de Caracteres (OCR) para detectar y transcribir todo el contenido textual, incluyendo preguntas, respuestas de los estudiantes y cualquier anotación.
    - **Identificación de Imágenes y Gráficos**:
      - Detectar y etiquetar todos los elementos no textuales como imágenes, gráficos y diagramas.
      - Extraer cualquier información textual incrustada dentro de estos elementos gráficos.
    - **Preservación de la Disposición**:
      - Mantener la disposición y estructura original del contenido, preservando la secuencia y las relaciones espaciales tanto como sea posible.

3. **Categorización del Contenido**:
    - **Preguntas**: Identificar y etiquetar el texto y el puntaje de las preguntas.
    - **Respuestas de los Estudiantes**: Extraer y etiquetar las respuestas proporcionadas por el estudiante.
    - **Diagramas/Gráficos**: Identificar y describir diagramas, gráficos y otros elementos visuales, incluyendo cualquier leyenda o pie de foto asociado.
    - **Otras Anotaciones**: Capturar cualquier nota adicional, instrucciones o marcas en la página.

## Structured Output
Output the extracted content in the following JSON format:

```json
{
  "exam_content": [
    {
      "page_number": "<Page number>",
      "elements": [
        {
          "type": "text",
          "content": "<Extracted text>",
          "position": "<Position or bounding box coordinates>"
        },
        {
          "type": "image",
          "description": "<Description of the image content>",
          "position": "<Position or bounding box coordinates>"
        },
        {
          "type": "chart",
          "description": "<Description of the chart and any text within>",
          "position": "<Position or bounding box coordinates>"
        },
        // Additional elements as needed
      ]
    }
    // Repeat for each page
  ]
}



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/sabio/teacher/actualizar_data.py:

import os
import sys
from PyPDF2 import PdfReader
import tiktoken
from dotenv import load_dotenv
import logging
from ...clients import create_embeddings, create_vision_completion
from pdf2image import convert_from_path
import base64
import io
import concurrent.futures
from ai_backend.models import Clase

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

wd = os.getcwd()
sys.path.append(wd + "/backend")

from chromadb_setup import add_documento_clase_embedding
from chromadb_setup import reset_collection_by_clase_id
from chromadb_setup import collection_exists

load_dotenv()

def encode_image_pil(image_pil):
    img_byte_arr = io.BytesIO()  # Create a BytesIO buffer
    image_pil.save(img_byte_arr, format='JPEG')  # Save the PIL image to the buffer in JPEG format
    img_byte_arr = img_byte_arr.getvalue()  # Get the byte value of the image
    return base64.b64encode(img_byte_arr).decode('utf-8')  # Encode to base64 and decode to string

def pdf_to_images(pdf_path):
    try:
        logging.info(f"Converting PDF to images for {pdf_path}")
        # Convert PDF pages to images
        images = convert_from_path(pdf_path)
        base64_images = []
        for image in images:
            # Directly encode the PIL image to base64
            base64_image = encode_image_pil(image)
            base64_images.append(base64_image)
        return base64_images
    except Exception as e:
        logging.error(f"Error processing {pdf_path}: {e}")
        return None
    
def get_clase_instance_name(clase_id):
    try:
        clase_instance = Clase.objects.get(pk=clase_id)
        return clase_instance.nombre  # Assuming the model has a 'name' attribute
    except Clase.DoesNotExist:
        logging.error(f"Clase with id {clase_id} does not exist.")
        return None  # Or handle the error as you see fit

def interpret_images(base64_images, filename, clase_id, role):
    interpretations = []
    if role == "class_training":
        class_name = get_clase_instance_name(clase_id)
    
    if not base64_images:
        logging.error("No images to interpret. base64_images is None or empty.")
        return interpretations

    # Define a function that will be executed by each thread
    def process_image(base64_image):
        if role == "class_training": 
            image_prompt = f"Class Name: {class_name}, Image comes from a pdf named: {filename}, Screenshot from class material:"
        else:
            image_prompt = f"Image comes from a pdf named: {filename}, Screenshot from class material:"
        # Assuming create_vision_completion is your function to process the image
        result = create_vision_completion(base64_image, image_prompt)
        return result['choices'][0]['message']['content']
    
    # Use ThreadPoolExecutor to process images in parallel
    with concurrent.futures.ThreadPoolExecutor() as executor:
        # Map process_image function to each base64_image
        future_to_image = {executor.submit(process_image, base64_image): base64_image for base64_image in base64_images}
        
        for future in concurrent.futures.as_completed(future_to_image):
            try:
                result = future.result()
                interpretations.append(result)
            except Exception as exc:
                logging.error(f'Generated an exception: {exc}')
    
    return interpretations


def extract_text_from_pdf(pdf_path):
    try:
        if not os.path.exists(pdf_path):
            logging.warning(f"File not found: {pdf_path}")
            return ""
        
        reader = PdfReader(pdf_path)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
        return text
    except Exception as e:
        logging.error(f"Error reading {pdf_path}: {e}")
        return ""

def chunk_text(text, max_tokens):
    encoding = tiktoken.encoding_for_model('gpt-4')
    words = text.split()
    chunks = []
    current_chunk = []
    for word in words:
        current_chunk.append(word)
        if len(encoding.encode(' '.join(current_chunk))) > max_tokens:
            current_chunk.pop()
            chunks.append(' '.join(current_chunk))
            current_chunk = [word]
    if current_chunk:
        chunks.append(' '.join(current_chunk))
    return chunks

class CollectionDoesNotExistException(Exception):
    pass

## ESTO SE PUEDE MEJORAR QUE TODOS LOS EMBEDDINGS DE TODOS LOS DOCS SE HAGAN EN EL MISMO EMBEDDINGS API REQUEST ENVES DE EN SEPARADOS....... AKA FUERA DEL LOOP O COMO SEA
def main(pdf_inputs, id, max_tokens, role):
    total_chunks_across_documents = 0
    total_successful_adds = 0

    item_type = "clase_id" if role == "class_training" else "hilo_id"
    error_message = f"Collection for {item_type} {id} does not exist."

    if not collection_exists(id, role):
        logging.error(error_message)
        raise CollectionDoesNotExistException(error_message)
    
    #reset_collection_by_clase_id(clase_id)

    for pdf_input in pdf_inputs:
        pdf_path = pdf_input['file_path']
        documento_id = pdf_input['documento_id']
        filename = os.path.splitext(os.path.basename(pdf_path))[0]
        
        images_list = pdf_to_images(pdf_path)
        if not images_list:
            logging.error(f"Failed to convert PDF to images for {pdf_path}. Skipping this file.")
            continue

        interpretations = interpret_images(images_list, filename, id, role)
        text = extract_text_from_pdf(pdf_path)
        interpretations_text = "\n".join(interpretations)
        combined_text = text + "\n\n" + interpretations_text

        text_chunks = chunk_text(combined_text, max_tokens)
        total_chunks = len(text_chunks)
        total_chunks_across_documents += total_chunks

        logging.info(f"Processing {pdf_path}: {total_chunks} chunks")

        successful_adds_per_document = 0
        embedding_responses = create_embeddings(text_chunks=text_chunks)

        for index, embedding_data in enumerate(embedding_responses.data):
            embedding = embedding_data.embedding
            original_text = text_chunks[index]

            if add_documento_clase_embedding(documento_id, id, original_text, embedding, role):
                successful_adds_per_document += 1
            else:
                logging.error(f"Failed to add chunk {index + 1} of {total_chunks} for document {documento_id}")

        total_successful_adds += successful_adds_per_document

        logging.info(f"Document ID {documento_id}: {successful_adds_per_document}/{total_chunks} chunks successfully added.")

    logging.info(f"All documents processed. Total chunks across all documents: {total_chunks_across_documents}. Total embeddings added: {total_successful_adds}.")

    # Verification
    if total_chunks_across_documents == total_successful_adds:
        logging.info("All text chunks have been successfully processed and added to the database.")
    else:
        logging.warning("Mismatch in total chunks and successful database entries. Some chunks may not have been added correctly.")



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/index.html:

<!DOCTYPE html>
{% load static %}
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Impulsa la Eficiencia de tus Aulas con SABIO</title>
    <link rel="stylesheet" href="{% static 'ai_backend/css/styles.css' %}">
    <meta name="description" content="SABIO es tu aliado en la transformación educativa, utilizando IA para mejorar la eficiencia en las aulas. Descubre nuestras características innovadoras.">
    <meta name="keywords" content="educación, inteligencia artificial, eficiencia en aulas, chatbots educativos, análisis educativo">
    <meta name="author" content="Tu Empresa">
    <style>
        /* Global Styles */
        body {
            font-family: 'Roboto', sans-serif;
            color: #333;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #fff; /* Ensure background is white */
        }

        a {
            color: #0095ff; /* Brand color */
            text-decoration: none;
            transition: color 0.3s;
        }

        a:hover {
            color: #007acc; /* Slightly darker shade for hover */
        }

        h1, h2, h3 {
            margin-bottom: 20px;
            color: #222;
        }

        p {
            margin-bottom: 20px;
        }

        .container {
            width: 100%; /* Full width */
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
            background-color: transparent; /* Ensure background of container is white */
        }

        /* Navigation Styles */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #fff;
            padding: 20px 30px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

        .navbar .logo img {
            width: 80px; /* Reduced logo size */
            height: auto;
        }

        .nav-links {
            list-style: none;
            display: flex;
            gap: 30px;
        }

        .nav-links li a {
            color: #0095ff; /* Brand color */
            font-size: 18px;
            padding: 10px 20px;
            transition: background-color 0.3s ease-in-out;
        }

        .nav-links li a:hover {
            background-color: #cce5ff; /* Light blue hover effect */
            border-radius: 4px;
        }

        .hero {
            position: relative;
            background-image: url('{% static "ai_backend/images/hero-bg.jpg" %}');
            background-size: cover;
            background-position: center;
            text-align: center;
            padding: 120px 20px;
        }

        .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Dark overlay only on background */
            z-index: 1; /* Positioned behind content */
        }

        .hero::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for better text contrast */
            z-index: 1;
        }

        .hero-content {
            position: relative;
            z-index: 2; /* Ensure content is above the overlay */
            background-color: transparent; /* No background on content */
        }

        .hero h1, .hero p, .hero .btn-primary {
            color: #fff; /* Ensure text and buttons are visible */
        }

        .hero h1 {
            font-size: 56px; /* Slightly increased font size */
            font-weight: 700;
            margin-bottom: 20px;
            color: #0095ff; /* Brand color */
        }

        .hero p {
            font-size: 22px; /* Increased font size */
            margin-bottom: 40px;
            font-weight: 500; /* Bolder subheadline */
        }

        .hero .btn-primary {
            background-color: #ff6600; /* Kept the vibrant orange color */
            color: #fff;
            padding: 14px 35px;
            font-size: 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s ease-in-out, transform 0.2s ease;
        }

        .hero .btn-primary:hover {
            background-color: #e65c00;
            transform: scale(1.05); /* Subtle hover effect */
        }

        /* Visual Transition */
        .hero + .content {
            margin-top: -30px; /* Overlap effect */
            padding-top: 60px;
            background: linear-gradient(to bottom, #f9f9f9, #fff); /* Subtle gradient transition */
        }

        /* Features Section */
        .features {
            display: flex;
            justify-content: space-between;
            gap: 40px;
            padding: 80px 0;
            background-color: #fff; /* White background to match the rest of the page */
            text-align: center;
            border: none; /* No borders needed */
        }

        .feature-item {
            flex: 1;
            padding: 30px;
        }

        .feature-item img {
            width: 130px; /* Increased icon size */
            margin-bottom: 20px;
            filter: drop-shadow(0px 2px 4px rgba(0, 0, 0, 0.1)); /* Added subtle shadow */
        }

        .feature-item h2 {
            font-size: 28px; /* Slightly larger font size */
            font-weight: 600;
            margin-bottom: 15px;
            color: #0095ff; /* Brand color */
        }

        .feature-item p {
            color: #555; /* Subtle color adjustment for better contrast */
        }

        /* How It Works Section */
        .how-it-works {
            padding: 80px 0;
            background-color: #f2f2f2;
            text-align: center;
        }

        .how-it-works .steps {
            display: flex;
            justify-content: center;
            gap: 50px;
        }

        .how-it-works .step {
            flex: 1;
            max-width: 320px;
            padding: 20px;
        }

        .how-it-works .step h3 {
            font-size: 24px;
            color: #0095ff; /* Brand color */
            margin-bottom: 15px;
        }

        .how-it-works .step p {
            color: #555; /* Subtle color adjustment for better contrast */
        }

        /* Testimonials Section */
        .testimonials {
            padding: 80px 20px;
            background-color: #fff;
            text-align: center;
        }

        .testimonial-item {
            max-width: 700px;
            margin: 0 auto;
        }

        .testimonial-item blockquote {
            font-size: 20px;
            font-style: italic;
            color: #444;
            margin-bottom: 20px;
        }

        .testimonial-item .user-name {
            font-weight: 700;
            color: #0095ff; /* Brand color */
        }

        /* Call to Action Section */
        .call-to-action {
            padding: 80px 20px;
            background-color: #0095ff; /* Brand color */
            color: #fff;
            text-align: center;
        }

        .call-to-action h2 {
            font-size: 36px;
            margin-bottom: 30px;
        }

        .call-to-action .btn-secondary {
            background-color: #fff;
            color: #0095ff; /* Brand color */
            padding: 14px 35px;
            font-size: 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s ease-in-out, transform 0.2s ease;
        }

        .call-to-action .btn-secondary:hover {
            background-color: #cce5ff;
            transform: scale(1.05); /* Subtle hover effect */
        }

        /* Footer */
        #main-footer {
            background-color: #333; /* Darker footer background */
            color: #fff;
            padding: 40px 0;
            text-align: center;
        }

        .footer-content p {
            margin: 0;
            font-size: 16px;
        }

        .footer-content .social-links a {
            color: #fff;
            margin: 0 15px;
            font-size: 20px;
            transition: color 0.3s ease-in-out;
        }

        .footer-content .social-links a:hover {
            color: #0095ff; /* Brand color for hover effect */
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .features, .how-it-works .steps {
                flex-direction: column;
                align-items: center;
            }

            .navbar .nav-links {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>

    <!-- Header -->
    <header id="main-header">
        <nav class="navbar">
            <!-- Logo -->
            <div class="logo">
                <a href="index.html">
                    <img src="/media/logo/logo.png" alt="Logo de SABIO" class="logo-img">
                </a>
            </div>
            <!-- Navigation Links -->
            <ul class="nav-links">
                <li><a href="#features">Características</a></li>
                <li><a href="#how-it-works">Cómo Funciona</a></li>
                <li><a href="#testimonials">Testimonios</a></li>
            </ul>
        </nav>
    </header>
    
    <!-- Main Content -->
    <main>
        <!-- Hero Section -->
        <section class="hero">
            <div class="hero-overlay"></div>
            <div class="hero-content container">
                <h1>Impulsa la Eficiencia de tus Aulas con SABIO</h1>
                <p>Transforma la educación con inteligencia artificial. SABIO es tu aliado para mejorar la participación estudiantil, personalizar el aprendizaje y optimizar los resultados académicos.</p>
                <a href="#get-started" class="btn btn-primary">Descubre SABIO</a>
            </div>
        </section>
        
        <!-- Features Section -->
        <section id="features" class="features container">
            <div class="feature-item">
                <img src="{% static 'ai_backend/images/chatbot.png' %}" alt="Chatbots Personalizados">
                <h2>Chatbots Personalizados</h2>
                <p>Interactúa con los estudiantes de manera más efectiva utilizando chatbots diseñados para responder preguntas, ofrecer explicaciones detalladas y guiar el aprendizaje a lo largo del curso. Los chatbots de SABIO son capaces de adaptarse a diferentes niveles de comprensión, ofreciendo respuestas personalizadas que se ajustan a las necesidades individuales de cada estudiante.</p>
            </div>
            <div class="feature-item">
                <img src="{% static 'ai_backend/images/analysis.png' %}" alt="Análisis Profundo">
                <h2>Análisis Profundo</h2>
                <p>Obtén una visión integral del rendimiento de tus estudiantes con análisis detallados basados en datos. SABIO proporciona informes que destacan áreas de mejora y sugieren enfoques personalizados para ayudar a los estudiantes a superar sus desafíos académicos. Además, los datos recopilados permiten a los educadores ajustar el plan de estudios para maximizar el aprendizaje.</p>
            </div>
            <div class="feature-item">
                <img src="{% static 'ai_backend/images/teacher-tools.png' %}" alt="Herramientas para Profesores">
                <h2>Herramientas para Profesores</h2>
                <p>Facilita la creación, gestión y corrección de exámenes con herramientas intuitivas y potentes. SABIO permite a los profesores diseñar exámenes personalizados, automatizar la corrección de pruebas y recibir análisis detallados sobre el rendimiento de los estudiantes. Esto no solo ahorra tiempo, sino que también mejora la precisión y la equidad en la evaluación.</p>
            </div>
        </section>
        
        <!-- How It Works Section -->
        <section id="how-it-works" class="how-it-works">
            <div class="container">
                <h2>La Integración de SABIO</h2>
                <div class="steps">
                    <div class="step">
                        <h3>Adopción Simple</h3>
                        <p>La implementación de SABIO es rápida y sin complicaciones. Nos encargamos de todo el proceso, desde la instalación hasta la capacitación del personal, garantizando que tu institución esté lista para aprovechar al máximo las capacidades de la inteligencia artificial en el aula.</p>
                    </div>
                    <div class="step">
                        <h3>Interfaz Intuitiva</h3>
                        <p>Con una interfaz diseñada para ser accesible y fácil de usar, SABIO permite a los profesores y administradores gestionar sus clases y recursos de manera eficiente. La plataforma está diseñada para minimizar la curva de aprendizaje, permitiendo a los usuarios centrarse en lo que realmente importa: la educación.</p>
                    </div>
                    <div class="step">
                        <h3>Soporte Continuo</h3>
                        <p>Estamos comprometidos con el éxito de tu institución. Nuestro equipo de soporte está disponible para ayudarte en todo momento, asegurando que SABIO funcione sin problemas y responda a las necesidades cambiantes de tu entorno educativo.</p>
                    </div>
                </div>
            </div>
        </section>
        
        <!-- Testimonials Section -->
        <section id="testimonials" class="testimonials">
            <div class="container">
                <h2>Experiencias Transformadoras</h2>
                <div class="testimonial-item">
                    <blockquote>
                        "Desde que implementamos SABIO, nuestros estudiantes han mostrado un notable incremento en su participación y rendimiento. La plataforma ha sido un cambio paradigmático en nuestra metodología de enseñanza."
                    </blockquote>
                    <p class="user-name">- Directora de Innovación Educativa, Universidad XYZ</p>
                </div>
                <div class="testimonial-item">
                    <blockquote>
                        "SABIO nos ha permitido ofrecer una experiencia de aprendizaje más personalizada y eficiente. Los datos proporcionados por la plataforma nos han ayudado a adaptar nuestras estrategias educativas de manera efectiva."
                    </blockquote>
                    <p class="user-name">- Profesor de Ciencias, Instituto ABC</p>
                </div>
                <div class="testimonial-item">
                    <blockquote>
                        "La integración de SABIO ha sido fluida y el soporte ha sido excelente. Nuestros profesores y estudiantes han adoptado rápidamente la plataforma, y hemos visto mejoras significativas en la dinámica del aula."
                    </blockquote>
                    <p class="user-name">- Coordinador Académico, Colegio 123</p>
                </div>
            </div>
        </section>
        
        <!-- Call to Action Section -->
        <section class="call-to-action">
            <div class="container">
                <h2>Únete a la Revolución Educativa</h2>
                <p>No te quedes atrás en la transformación digital de la educación. Con SABIO, puedes llevar la enseñanza y el aprendizaje al siguiente nivel, aprovechando lo mejor de la inteligencia artificial para crear un entorno educativo más eficiente y personalizado.</p>
                <a href="#contact" class="btn btn-secondary">Contacta con Nosotros</a>
            </div>
        </section>
    </main>
    
    <!-- Footer -->
    <footer id="main-footer">
        <div class="footer-content">
            <p>Contacto: <a href="mailto:sabiopass@gmail.com">sabiopass@gmail.com</a></p>
            <!-- Social Media Links -->
            <div class="social-links">
                <a href="#" aria-label="Facebook">Facebook</a>
                <a href="#" aria-label="Twitter">Twitter</a>
                <a href="#" aria-label="LinkedIn">LinkedIn</a>
            </div>
        </div>
    </footer>

    <script src="{% static 'ai_backend/js/scripts.js' %}" defer></script>
</body>

</html>



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/home.html:

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Página principal de la aplicación">
    <title>Página Principal</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
        }

        h1 {
            font-size: 32px;
            color: #007bff;
        }

        .class-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }

        .class-card {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: calc(33.333% - 20px); /* Adjust for 3 cards per row with a 20px gap */
            box-sizing: border-box;
            text-align: left;
        }

        .class-card h3 {
            font-size: 24px;
            margin-bottom: 10px;
            color: #333;
        }

        .class-card .exam-actions {
            margin-bottom: 15px;
        }

        .class-card button {
            padding: 10px 15px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .class-card button:hover {
            background-color: #0056b3;
        }

        .exam-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .exam-list li {
            margin-bottom: 10px;
        }

        .exam-list strong {
            font-size: 18px;
            color: #333;
        }

        .exam-actions a {
            margin-left: 10px;
            color: #007bff;
            text-decoration: none;
            font-size: 14px;
        }

        .exam-actions a:hover {
            text-decoration: underline;
        }

        .logout-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #dc3545;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        .logout-button:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Bienvenido, {{ user.username }}</h1>

        {% if error %}
            <p>{{ error }}</p>
        {% else %}
            <h2>Mis Clases</h2>

            <div class="class-grid">
                {% for clase in class_data %}
                    <div class="class-card">
                        <h3>{{ clase.class.nombre }}</h3>
                        <div class="exam-actions">
                            <a href="{% url 'create_exam' clase.class.id %}" class="action-button">Crear Examen</a>
                        </div>
                        <h4>Exámenes</h4>
                        <ul class="exam-list">
                            {% for exam in clase.exams %}
                                <li>
                                    <strong>{{ exam.exam.title }}</strong>
                                    <div class="exam-actions">
                                        <a href="{% url 'upload_exam_file' exam.exam.id %}">Subir Ejemplar</a>
                                        <a href="{% url 'view_exam' exam.exam.id %}">Ver Examen</a>
                                    </div>
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    </div>
</body>
</html>



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/exam_success.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Detailed exam results with feedback and suggestions for improvement">
  <title>Exam Results</title>
  <style>
    :root {
        --primary-color: #007bff;
        --primary-hover: #0056b3;
        --secondary-color: #0056b3;
        --secondary-hover: #004494;
        --text-color: #333;
        --background-color: #f8f9fa;
        --border-radius: 4px;
        --input-padding: 10px;
        --transition-duration: 0.2s;
        --box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        --score-color: #333;
        --correct-color: green;
        --incorrect-color: red;
        --suggestions-color: #333;
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
    }

    .result-container {
        background-color: #fff;
        padding: 24px;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        max-width: 800px;
        width: 100%;
    }

    .result-header {
        margin-bottom: 20px;
        text-align: center;
    }

    .result-header h1 {
        font-size: 24px;
        color: var(--primary-color);
        margin-bottom: 10px;
    }

    .result-header p {
        font-size: 18px;
        font-weight: bold;
        color: var(--score-color);
        margin-bottom: 5px;
    }

    .result-header .summary-feedback {
        font-size: 16px;
        color: var(--text-color);
        margin-bottom: 20px;
    }

    .result-section {
        margin-bottom: 20px;
        border: 1px solid #ddd;
        border-radius: var(--border-radius);
        padding: 20px;
        background-color: transparent;
    }

    .result-section h2 {
        font-size: 20px;
        color: var(--secondary-color);
        margin-bottom: 10px;
        display: inline-block;
    }

    .result-section .score {
        font-size: 16px;
        color: var(--score-color);
        font-style: italic;
        margin-left: 10px;
    }

    .result-content {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
    }

    .feedback {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-bottom: 20px;
    }

    .feedback-column {
        flex: 1;
        min-width: 300px;
        margin-right: 10px;
        padding: 10px;
        border-radius: var(--border-radius);
        background-color: transparent;
    }

    .feedback-column:last-child {
        margin-right: 0;
    }

    .feedback-column h3 {
        margin-bottom: 10px;
        padding-bottom: 5px;
        border-bottom: 1px solid #ddd;
    }

    .feedback-list {
        list-style-type: none;
        padding-left: 0;
        margin-bottom: 10px;
    }

    .feedback-list li {
        margin-bottom: 15px;
        padding-left: 24px;
        position: relative;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .feedback-list li.correct::before,
    .feedback-list li.incorrect::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }

    .feedback-list li.correct::before {
        background-color: var(--correct-color);
    }

    .feedback-list li.incorrect::before {
        background-color: var(--incorrect-color);
    }

    .feedback-list li.correct::after {
        content: '✓';
        color: var(--correct-color);
        font-size: 1.35em; 
        margin-left: 10px;
    }

    .feedback-list li.incorrect::after {
        content: '❌';
        color: var(--incorrect-color);
        margin-left: 10px;
    }

    .suggestions {
        font-style: italic;
        color: var(--suggestions-color);
    }

    .suggestions strong {
        font-weight: bold;
    }

    /* Nuevos estilos para la caja de texto y botón */
    .feedback-input {
        margin-top: 20px;
    }

    .feedback-input label {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 5px;
        display: block;
    }

    .feedback-input textarea {
        width: 100%;
        padding: var(--input-padding);
        border-radius: var(--border-radius);
        border: 1px solid #ddd;
        margin-bottom: 10px;
        min-height: 100px;
        resize: vertical;
    }

    .feedback-input button {
        padding: 10px 20px;
        background-color: var(--primary-color);
        color: #fff;
        border: none;
        border-radius: var(--border-radius);
        cursor: pointer;
        transition: background-color var(--transition-duration);
    }

    .feedback-input button:hover {
        background-color: var(--primary-hover);
    }

  </style>
</head>
<body>
    <div class="result-container">
        <div class="result-header">
        <h1>Resultados del Examen para "{{ exam_title }}"</h1>
        <p>Puntuación Total: {{ overall_score }}</p>
        <p class="summary-feedback">{{ summary_feedback }}</p>
        </div>

        {% for result in results %}
        <div class="result-section">
        <div class="result-title">
            <h2>Pregunta {{ result.question_id }}</h2>
            <span class="score">(Puntuación: {{ result.student_score }})</span>
        </div>
        <div class="result-content">
            <div class="feedback">
            <div class="feedback-column">
                <h3>Correcto:</h3>
                <ul class="feedback-list">
                {% for item in result.feedback.correct %}
                <li class="correct">{{ item }}</li>
                {% endfor %}
                </ul>
            </div>
            <div class="feedback-column">
                <h3>Incorrecto:</h3>
                <ul class="feedback-list">
                {% for item in result.feedback.incorrect %}
                <li class="incorrect">{{ item }}</li>
                {% endfor %}
                </ul>
            </div>
            </div>
            <div class="suggestions">
            <p><strong>Sugerencias:</strong> {{ result.feedback.suggestions }}</p>
            </div>
        </div>
        </div>
        {% endfor %}

        <!-- Formulario para añadir feedback -->
        <form method="POST">
            {% csrf_token %}
            <div class="feedback-input">
                <label for="additional_feedback" style="color: #0056b3;">Añadir Feedback Adicional:</label>
                <textarea id="additional_feedback" name="additional_feedback" placeholder="Escribe aquí el feedback..."></textarea>
            </div>
            <button type="submit">Guardar</button>
        </form>
        <p style="font-size: 0.8em; color: #666; text-align: center; margin-top: 10px;">Disclaimer: The AI-generated content may not always be accurate. Please review the content carefully.</p>
    </div>
</body>  
</html>



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/view_exam.html:

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ exam.title }} - Ver Examen</title>
    <style>
        :root {
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --secondary-color: #0056b3;
            --secondary-hover: #004494;
            --text-color: #333;
            --background-color: #f8f9fa;
            --border-radius: 4px;
            --input-padding: 10px;
            --transition-duration: 0.2s;
            --box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            background-color: #fff;
            padding: 24px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            max-width: 800px;
            width: 100%;
            text-align: center;
        }

        h1 {
            font-size: 32px;
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .student-list {
            list-style: none;
            padding: 0;
            margin: 0;
            margin-bottom: 20px;
        }

        .student-item {
            background-color: #f0f0f0;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .student-name {
            font-size: 18px;
        }

        .button-container {
            display: flex;
            gap: 10px;
        }

        .file-label {
            display: block;
            padding: 15px;
            border: 2px dashed #ccc;
            border-radius: var(--border-radius);
            background-color: transparent;
            color: var(--text-color);
            cursor: pointer;
            transition: border-color var(--transition-duration), background-color var(--transition-duration);
            text-align: center;
        }

        .file-label:hover {
            border-color: var(--primary-color);
            background-color: rgba(0, 123, 255, 0.1);
        }

        input[type="file"] {
            display: none;
        }

        .action-button {
            padding: 10px 15px;
            border: none;
            border-radius: var(--border-radius);
            background-color: var(--secondary-color);
            color: #fff;
            cursor: pointer;
            font-size: 16px;
            transition: background-color var(--transition-duration);
            width: 100%;
            margin-top: 10px;
        }

        .action-button:hover {
            background-color: var(--secondary-hover);
        }

        .back-link {
            margin-top: 20px;
            display: block;
            color: var(--primary-color);
            text-decoration: none;
        }

        .back-link:hover {
            color: var(--primary-hover);
        }

        /* Section for uploading exemplary exam */
        .upload-section {
            margin-top: 20px;
            padding: 20px;
            border-radius: var(--border-radius);
            background-color: #f8f9fa;
            text-align: left;
            box-shadow: var(--box-shadow);
        }

        .upload-section h2 {
            font-size: 20px;
            margin-bottom: 10px;
            color: var(--secondary-color);
        }

        .upload-section button {
            padding: 10px 15px;
            background-color: var(--primary-color);
            color: #fff;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
            width: 100%;
        }

        .upload-section button:hover {
            background-color: var(--primary-hover);
        }

        /* Loading Screen */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity var(--transition-duration) linear;
        }

        .loading-overlay.active {
            visibility: visible;
            opacity: 1;
        }

        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>{{ exam.title }} - Estudiantes</h1>
        <ul class="student-list">
            {% for student in students %}
                <li class="student-item">
                    <span class="student-name">{{ student.username }} (ID: {{ student.id }})</span>
                    <div class="button-container">
                        <form method="post" enctype="multipart/form-data" action="{% url 'upload_student_exam' exam.id student.id %}">
                            {% csrf_token %}
                            <label for="student_exam_{{ student.id }}" class="file-label">Seleccionar archivos</label>
                            <input type="file" name="student_exam" id="student_exam_{{ student.id }}" multiple required>
                            <button type="submit" class="action-button">Subir Examen</button>
                        </form>
                    </div>
                </li>
            {% endfor %}
        </ul>

        <!-- Section to upload the exemplary exam -->
        <div class="upload-section">
            <h2>Subir Examen Ejemplar</h2>
            <form method="post" enctype="multipart/form-data" action="{% url 'upload_exemplary_exam' exam.id %}">
                {% csrf_token %}
                <label for="exemplary_exam_file" class="file-label">Seleccionar archivos</label>
                <input type="file" name="exemplary_exam" id="exemplary_exam_file" multiple required>
                <button type="submit" class="action-button">Subir Examen</button>
            </form>
            {% if exam.exemplary_files.all %}
                <h3>Archivos Subidos:</h3>
                <ul>
                    {% for file in exam.exemplary_files.all %}
                        <li>{{ file.file.name }}</li>
                    {% endfor %}
                </ul>
            {% else %}
                <p>No hay archivos subidos.</p>
            {% endif %}
        </div>

        <a href="{% url 'home' %}" class="back-link">Volver a la página principal</a>
    </div>

    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const uploadForms = document.querySelectorAll('form');
            const loadingOverlay = document.getElementById('loadingOverlay');

            uploadForms.forEach(form => {
                form.addEventListener('submit', () => {
                    loadingOverlay.classList.add('active');
                });

                const fileInput = form.querySelector('input[type="file"]');
                const fileLabel = form.querySelector('.file-label');

                if (fileInput && fileLabel) {
                    fileInput.addEventListener('change', () => {
                        const fileNames = Array.from(fileInput.files).map(file => file.name).join(', ');
                        fileLabel.textContent = fileNames || 'Seleccionar archivos';
                    });

                    fileLabel.addEventListener('click', (e) => {
                        e.preventDefault();
                        fileInput.click();
                    });
                }
            });
        });
    </script>
</body>
</html>


/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/password_reset_email.html:

{% autoescape off %}
Hola {{ user.username }},

Has recibido este correo electrónico porque tu profesor ha solicitado restablecer la contraseña de tu cuenta.

Por favor, haz clic en el siguiente enlace para restablecer tu contraseña:
{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}

Si no solicitaste esto, por favor ignora este correo electrónico y tu contraseña permanecerá sin cambios.

El enlace para restablecer la contraseña es válido por 48 horas.

Gracias,
El equipo de {{ site_name }}
{% endautoescape %}



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/exam_upload.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="File upload form with professional styling and functionality">
  <title>Upload Exam Files</title>
  <style>
    :root {
      --primary-color: #007bff;
      --primary-hover: #0056b3;
      --secondary-color: #0056b3;
      --secondary-hover: #004494;
      --text-color: #333;
      --background-color: #f8f9fa;
      --border-radius: 4px;
      --input-padding: 10px;
      --transition-duration: 0.2s;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
      position: relative;
    }

    .form-container {
      background-color: #fff;
      padding: 20px;
      border-radius: var(--border-radius);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      max-width: 500px;
      width: 100%;
    }

    .form-header {
      margin-bottom: 20px;
      text-align: center;
    }

    .form-header h1 {
      font-size: 24px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }

    .form-input {
      width: 100%;
      padding: var(--input-padding);
      border: 1px solid #ccc;
      border-radius: var(--border-radius);
      font-size: 16px;
      transition: border-color var(--transition-duration);
    }

    .form-input:focus {
      border-color: var(--primary-color);
    }

    .file-input {
      display: none;
    }

    .file-label {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--input-padding);
      border: 2px dashed #ccc;
      border-radius: var(--border-radius);
      background-color: transparent;
      color: var(--text-color);
      cursor: pointer;
      transition: border-color var(--transition-duration), background-color var(--transition-duration);
    }

    .file-label:hover {
      border-color: var(--primary-color);
      background-color: rgba(0, 123, 255, 0.1);
    }

    .file-label-text {
      flex-grow: 1;
      text-align: left;
    }

    .file-count {
      font-size: 0.9em;
      color: #666;
      text-align: right;
    }

    .upload-button {
      display: block;
      width: 100%;
      padding: var(--input-padding);
      border: none;
      border-radius: var(--border-radius);
      background-color: var(--secondary-color);
      color: #fff;
      font-size: 16px;
      cursor: pointer;
      transition: background-color var(--transition-duration);
    }

    .upload-button:hover {
      background-color: var(--secondary-hover);
    }

    /* Loading Screen */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      visibility: hidden;
      opacity: 0;
      transition: visibility 0s, opacity var(--transition-duration) linear;
    }

    .loading-overlay.active {
      visibility: visible;
      opacity: 1;
    }

    .loading-spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="form-container">
    <div class="form-header">
      <h1>Subir Archivos de Examen</h1>
    </div>
    <form id="uploadForm" method="post" enctype="multipart/form-data">
      {% csrf_token %}
      <div class="form-group">
        <label for="examTitle" class="form-label">Título del Examen</label>
        <input type="text" id="examTitle" name="examTitle" class="form-input" required>
      </div>
      <div class="form-group">
        <input type="file" id="fileInput1" name="exemplary[]" class="file-input" multiple>
        <label for="fileInput1" class="file-label">
          <span class="file-label-text">Examen Ejemplar/Rubrica</span>
          <span class="file-count" id="fileCount1">No se han seleccionado archivos</span>
        </label>
      </div>
      <div class="form-group">
        <input type="file" id="fileInput2" name="student[]" class="file-input" multiple>
        <label for="fileInput2" class="file-label">
          <span class="file-label-text">Examen de Estudiante</span>
          <span class="file-count" id="fileCount2">No se han seleccionado archivos</span>
        </label>
      </div>
      <button type="submit" class="upload-button">Corregir!</button>
    </form>
    <p style="font-size: 0.8em; color: #666; text-align: center; margin-top: 10px;">Disclaimer: The AI-generated content may not always be accurate. Please review the content carefully.</p>
  </div>


  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const fileInput1 = document.getElementById('fileInput1');
      const fileCount1 = document.getElementById('fileCount1');
      const fileInput2 = document.getElementById('fileInput2');
      const fileCount2 = document.getElementById('fileCount2');
      const uploadForm = document.getElementById('uploadForm');
      const loadingOverlay = document.getElementById('loadingOverlay');

      fileInput1.addEventListener('change', () => updateFileCount(fileInput1, fileCount1));
      fileInput2.addEventListener('change', () => updateFileCount(fileInput2, fileCount2));

      function updateFileCount(input, countElement) {
        const files = input.files;
        countElement.textContent = files.length > 0 ? `${files.length} archivo(s) seleccionado(s)` : 'No se seleccionaron archivos';
      }

      uploadForm.addEventListener('submit', () => {
        loadingOverlay.classList.add('active');
      });
    });
  </script>
</body>
</html>



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/create_exam.html:

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Examen</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            width: 100%;
            text-align: center;
        }

        h1 {
            font-size: 24px;
            color: #007bff;
            margin-bottom: 20px;
        }

        p {
            color: #dc3545;
            margin-bottom: 15px;
        }

        form {
            display: flex;
            flex-direction: column;
            align-items: stretch;
        }

        label {
            font-size: 16px;
            margin-bottom: 5px;
            text-align: left;
            color: #555;
        }

        input[type="text"] {
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 15px;
            width: 100%;
            box-sizing: border-box;
        }

        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background-color: #0056b3;
        }

        a {
            display: inline-block;
            margin-top: 20px;
            color: #007bff;
            text-decoration: none;
            font-size: 14px;
        }

        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Crear Examen para {{ clase.nombre }}</h1>

        {% if error %}
            <p>{{ error }}</p>
        {% endif %}

        <form method="post">
            {% csrf_token %}
            <label for="exam_title">Título del Examen:</label>
            <input type="text" id="exam_title" name="exam_title" required>
            <button type="submit">Crear Examen</button>
        </form>

        <a href="{% url 'home' %}">Volver a la página principal</a>
    </div>
</body>
</html>



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/registration/login.html:

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Formulario de inicio de sesión con un diseño moderno y profesional">
  <title>Inicio de Sesión</title>
  <style>
    /* Existing styles... */
    :root {
      --primary-color: #007bff;
      --primary-hover: #0056b3;
      --secondary-color: #0056b3;
      --secondary-hover: #004494;
      --text-color: #333;
      --background-color: #f8f9fa;
      --border-radius: 4px;
      --input-padding: 10px;
      --transition-duration: 0.2s;
      --box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 20px;
    }

    .form-container {
      background-color: #fff;
      padding: 20px;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      max-width: 400px;
      width: 100%;
    }

    .form-header {
      margin-bottom: 20px;
      text-align: center;
    }

    .form-header h1 {
      font-size: 24px;
      color: var(--primary-color);
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      font-size: 14px;
    }

    .form-input {
      width: 100%;
      padding: var(--input-padding);
      border: 1px solid #ccc;
      border-radius: var(--border-radius);
      font-size: 16px;
      transition: border-color var(--transition-duration);
    }

    .form-input:focus {
      border-color: var(--primary-color);
    }

    .login-button {
      display: block;
      width: 100%;
      padding: var(--input-padding);
      border: none;
      border-radius: var(--border-radius);
      background-color: var(--secondary-color);
      color: #fff;
      font-size: 16px;
      cursor: pointer;
      transition: background-color var(--transition-duration);
    }

    .login-button:hover {
      background-color: var(--secondary-hover);
    }

    .form-footer {
      margin-top: 15px;
      text-align: center;
    }

    .form-footer a {
      color: var(--primary-color);
      text-decoration: none;
      transition: color var(--transition-duration);
    }

    .form-footer a:hover {
      color: var(--primary-hover);
    }

    /* Error message styles */
    .error-message {
      color: red;
      text-align: center;
      margin-bottom: 15px;
    }
  </style>
</head>
<body>
  <div class="form-container">
    <div class="form-header">
      <h1>Iniciar Sesión</h1>
    </div>

    <!-- Display error message if exists -->
    {% if error_message %}
      <div class="error-message">
        <p>{{ error_message }}</p>
      </div>
    {% endif %}

    <form id="loginForm" method="post" action="{% url 'login' %}">
      {% csrf_token %}
      <input type="hidden" name="next" value="{{ next }}">
      <div class="form-group">
        <label for="username" class="form-label">Usuario</label>
        <input type="text" id="username" name="username" class="form-input" required>
      </div>
      <div class="form-group">
        <label for="password" class="form-label">Contraseña</label>
        <input type="password" id="password" name="password" class="form-input" required>
      </div>
      <button type="submit" class="login-button">Ingresar</button>
    </form>
    
    

    <div class="form-footer">
      <p><a href="/forgot-password">¿Olvidaste tu contraseña?</a></p>
    </div>
  </div>
</body>
</html>



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/admin/instituciones_changelist.html:

{% extends "admin/change_list.html" %}
{% load i18n admin_urls static %}

{% block object-tools-items %}
    <li>
        <a href="{% url 'admin:import-json' %}" class="addlink">
            {% trans 'Import JSON' %}
        </a>
    </li>
    {{ block.super }}
{% endblock %}



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/admin/chat_interface.html:

{% extends "admin/change_form.html" %}

{% block content %}
{{ block.super }}
<div style="margin-top: 20px;">
    <form method="post" id="new_message_form">
        {% csrf_token %}
        <div class="form-row">
            <label for="new_message">Send Message to Sabio:</label>
            <!-- This textarea is for inputting new messages. It corresponds to the new_message field in HiloAdminForm. -->
            <textarea name="new_message" id="new_message" rows="4" cols="40"></textarea>
        </div>
        <div class="form-row">
            <!-- This submit button is for the form that includes the new message to the chatbot. -->
            <input type="submit" value="Submit" />
        </div>
    </form>
</div>
{% endblock %}



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/templates/admin/json_import_form.html:

{% extends "admin/base_site.html" %}
{% load i18n %}

{% block title %}Import JSON | {% translate "Django site admin" %}{% endblock %}

{% block content %}
<div id="content-main">
    <h1>{% translate "Import JSON Data" %}</h1>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="form-row">
            <label for="id_json_file">{% translate "JSON file:" %}</label>
            {{ form.json_file }}
        </div>
        <input type="submit" value="{% translate 'Import' %}">
    </form>
</div>
{% endblock %}



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/fixtures/initial_data.json:

[
  {
    "model": "ai_backend.institucion",
    "pk": 1,
    "fields": {
      "nombre": "Instituto Primario ABC",
      "direccion": "123 Calle Falsa",
      "tipo": "PRIMARIA",
      "contacto_nombre": "Juan Pérez",
      "contacto_correo": "juan.perez@institutoabc.edu",
      "contacto_telefono": "555-1234",
      "logo": null,
      "color": "#FF5733"
    }
  },
  {
    "model": "ai_backend.institucion",
    "pk": 2,
    "fields": {
      "nombre": "Colegio Secundario XYZ",
      "direccion": "456 Calle Verdadera",
      "tipo": "SECUNDARIA",
      "contacto_nombre": "Ana García",
      "contacto_correo": "ana.garcia@colegioxyz.edu",
      "contacto_telefono": "555-5678",
      "logo": null,
      "color": "#33FF57"
    }
  },
  {
    "model": "ai_backend.institucion",
    "pk": 3,
    "fields": {
      "nombre": "Universidad 123",
      "direccion": "789 Avenida Principal",
      "tipo": "UNIVERSIDAD",
      "contacto_nombre": "Carlos López",
      "contacto_correo": "carlos.lopez@universidad123.edu",
      "contacto_telefono": "555-8910",
      "logo": null,
      "color": "#5733FF"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 1,
    "fields": {
      "username": "profesor1",
      "password": "pbkdf2_sha256$150000$e6l4UPE6sIbG$C7W2a5VvF6Wz5zFzFV7TT4M+Tq8JYF7FV9b6vzFV9Vz=",
      "email": "profesor1@example.com",
      "profesion": "Matemáticas",
      "fecha_nacimiento": "1980-01-01",
      "sexo": "M",
      "tipo_usuario": "profesor",
      "foto": null,
      "is_superuser": false,
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 2,
    "fields": {
      "username": "alumno1",
      "password": "pbkdf2_sha256$150000$e6l4UPE6sIbG$C7W2a5VvF6Wz5zFzFV7TT4M+Tq8JYF7FV9b6vzFV9Vz=",
      "email": "alumno1@example.com",
      "profesion": null,
      "fecha_nacimiento": "2005-01-01",
      "sexo": "F",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 3,
    "fields": {
      "username": "profesor2",
      "password": "pbkdf2_sha256$150000$e6l4UPE6sIbG$C7W2a5VvF6Wz5zFzFV7TT4M+Tq8JYF7FV9b6vzFV9Vz=",
      "email": "profesor2@example.com",
      "profesion": "Historia",
      "fecha_nacimiento": "1975-05-15",
      "sexo": "F",
      "tipo_usuario": "profesor",
      "foto": null,
      "is_superuser": false,
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 4,
    "fields": {
      "username": "alumno2",
      "password": "pbkdf2_sha256$150000$e6l4UPE6sIbG$C7W2a5VvF6Wz5zFzFV7TT4M+Tq8JYF7FV9b6vzFV9Vz=",
      "email": "alumno2@example.com",
      "profesion": null,
      "fecha_nacimiento": "2006-04-12",
      "sexo": "M",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 5,
    "fields": {
      "username": "andresshamis",
      "password": "Al10101010",
      "email": "andreshamis31@gmail.com",
      "profesion": "Matemáticas",
      "fecha_nacimiento": "1980-01-01",
      "sexo": "M",
      "tipo_usuario": "profesor",
      "foto": null,
      "is_superuser": true,
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 6,
    "fields": {
      "username": "alumno3",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno3@example.com",
      "profesion": null,
      "fecha_nacimiento": "2004-02-03",
      "sexo": "M",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 7,
    "fields": {
      "username": "alumno4",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno4@example.com",
      "profesion": null,
      "fecha_nacimiento": "2005-08-19",
      "sexo": "F",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 8,
    "fields": {
      "username": "alumno5",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno5@example.com",
      "profesion": null,
      "fecha_nacimiento": "2006-03-11",
      "sexo": "M",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 9,
    "fields": {
      "username": "alumno6",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno6@example.com",
      "profesion": null,
      "fecha_nacimiento": "2004-09-23",
      "sexo": "F",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 10,
    "fields": {
      "username": "alumno7",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno7@example.com",
      "profesion": null,
      "fecha_nacimiento": "2005-10-30",
      "sexo": "M",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 11,
    "fields": {
      "username": "alumno8",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno8@example.com",
      "profesion": null,
      "fecha_nacimiento": "2006-12-15",
      "sexo": "F",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 12,
    "fields": {
      "username": "alumno9",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "alumno9@example.com",
      "profesion": null,
      "fecha_nacimiento": "2004-06-06",
      "sexo": "M",
      "tipo_usuario": "alumno",
      "foto": null,
      "is_superuser": false,
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 13,
    "fields": {
      "username": "kevinbolo",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "kevinbolo@example.com",
      "profesion": "Física",
      "fecha_nacimiento": "1985-02-15",
      "sexo": "M",
      "tipo_usuario": "profesor",
      "foto": null,
      "is_superuser": false,
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.customuser",
    "pk": 14,
    "fields": {
      "username": "axelzapler",
      "password": "pbkdf2_sha256$150000$hash$hashvalue",
      "email": "axelzapler@example.com",
      "profesion": "Química",
      "fecha_nacimiento": "1982-06-20",
      "sexo": "M",
      "tipo_usuario": "profesor",
      "foto": null,
      "is_superuser": false,
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-01-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 1,
    "fields": {
      "nombre": "Matemáticas Avanzadas",
      "profesor": 1,
      "estudiantes": [2, 4],
      "institucion": 1
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 2,
    "fields": {
      "nombre": "Historia del Arte",
      "profesor": 3,
      "estudiantes": [2],
      "institucion": 2
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 3,
    "fields": {
      "nombre": "Álgebra",
      "profesor": 5,
      "estudiantes": [6, 7, 8, 9],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 4,
    "fields": {
      "nombre": "Cálculo",
      "profesor": 5,
      "estudiantes": [6, 7, 8, 10],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 5,
    "fields": {
      "nombre": "Geometría",
      "profesor": 5,
      "estudiantes": [7, 8, 9, 10],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 6,
    "fields": {
      "nombre": "Física Cuántica",
      "profesor": 13,
      "estudiantes": [2, 4, 6],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 7,
    "fields": {
      "nombre": "Mecánica Clásica",
      "profesor": 13,
      "estudiantes": [7, 8, 9],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 8,
    "fields": {
      "nombre": "Química Orgánica",
      "profesor": 14,
      "estudiantes": [2, 10, 11],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.clase",
    "pk": 9,
    "fields": {
      "nombre": "Química Inorgánica",
      "profesor": 14,
      "estudiantes": [6, 7, 12],
      "institucion": 3
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 1,
    "fields": {
      "clase": 1,
      "start_datetime": "2023-07-01T08:00:00Z",
      "end_datetime": "2023-07-01T10:00:00Z"
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 2,
    "fields": {
      "clase": 1,
      "start_datetime": "2023-07-01T10:00:00Z",
      "end_datetime": "2023-07-01T12:00:00Z"
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 3,
    "fields": {
      "clase": 2,
      "start_datetime": "2023-07-02T14:00:00Z",
      "end_datetime": "2023-07-02T16:00:00Z"
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 4,
    "fields": {
      "clase": 2,
      "start_datetime": "2023-07-03T08:00:00Z",
      "end_datetime": "2023-07-03T10:00:00Z"
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 5,
    "fields": {
      "clase": 3,
      "start_datetime": "2023-08-01T08:00:00Z",
      "end_datetime": "2023-08-01T10:00:00Z"
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 6,
    "fields": {
      "clase": 4,
      "start_datetime": "2023-08-02T08:00:00Z",
      "end_datetime": "2023-08-02T10:00:00Z"
    }
  },
  {
    "model": "ai_backend.horario",
    "pk": 7,
    "fields": {
      "clase": 5,
      "start_datetime": "2023-08-03T08:00:00Z",
      "end_datetime": "2023-08-03T10:00:00Z"
    }
  },
  {
    "model": "ai_backend.hilo",
    "pk": 1,
    "fields": {
      "clase": 1,
      "user": 2,
      "fecha_creacion": "2023-07-01T10:00:00Z",
      "ultima_actualizacion": "2023-07-01T12:00:00Z"
    }
  },
  {
    "model": "ai_backend.hilo",
    "pk": 2,
    "fields": {
      "clase": 2,
      "user": 4,
      "fecha_creacion": "2023-07-02T14:00:00Z",
      "ultima_actualizacion": "2023-07-02T16:00:00Z"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 1,
    "fields": {
      "archivo": "path/to/document1.pdf",
      "clase": 1,
      "hilo": null,
      "tipo": "PDF",
      "fecha_subida": "2023-07-01T10:00:00Z",
      "hash": "abc123"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 2,
    "fields": {
      "archivo": "path/to/document2.pdf",
      "clase": null,
      "hilo": 1,
      "tipo": "PDF",
      "fecha_subida": "2023-07-01T12:00:00Z",
      "hash": "def456"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 3,
    "fields": {
      "archivo": "path/to/document3.pdf",
      "clase": 2,
      "hilo": null,
      "tipo": "PDF",
      "fecha_subida": "2023-07-02T14:00:00Z",
      "hash": "ghi789"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 4,
    "fields": {
      "archivo": "path/to/document4.pdf",
      "clase": 6,
      "hilo": null,
      "tipo": "PDF",
      "fecha_subida": "2023-08-01T10:00:00Z",
      "hash": "xyz123"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 5,
    "fields": {
      "archivo": "path/to/document5.pdf",
      "clase": 7,
      "hilo": null,
      "tipo": "PDF",
      "fecha_subida": "2023-08-02T10:00:00Z",
      "hash": "uvw456"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 6,
    "fields": {
      "archivo": "path/to/document6.pdf",
      "clase": 8,
      "hilo": null,
      "tipo": "PDF",
      "fecha_subida": "2023-08-03T10:00:00Z",
      "hash": "rst789"
    }
  },
  {
    "model": "ai_backend.documento",
    "pk": 7,
    "fields": {
      "archivo": "path/to/document7.pdf",
      "clase": 9,
      "hilo": null,
      "tipo": "PDF",
      "fecha_subida": "2023-08-04T10:00:00Z",
      "hash": "opq012"
    }
  },
  {
    "model": "ai_backend.mensaje",
    "pk": 1,
    "fields": {
      "hilo": 1,
      "texto": "Bienvenidos a la clase de Matemáticas Avanzadas",
      "es_del_bot": "user",
      "timestamp": "2023-07-01T10:05:00Z"
    }
  },
  {
    "model": "ai_backend.mensaje",
    "pk": 2,
    "fields": {
      "hilo": 2,
      "texto": "Introducción a la Historia del Arte",
      "es_del_bot": "assistant",
      "timestamp": "2023-07-02T14:05:00Z"
    }
  },
  {
    "model": "ai_backend.mensaje",
    "pk": 3,
    "fields": {
      "hilo": 2,
      "texto": "Continuaremos con la discusión la próxima clase.",
      "es_del_bot": "system",
      "timestamp": "2023-07-02T16:05:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 1,
    "fields": {
      "title": "Examen Final de Álgebra",
      "clase": 3,
      "professor": 5,
      "created_at": "2023-08-01T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 2,
    "fields": {
      "title": "Examen Parcial de Cálculo",
      "clase": 4,
      "professor": 5,
      "created_at": "2023-08-02T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 3,
    "fields": {
      "title": "Examen de Geometría",
      "clase": 5,
      "professor": 5,
      "created_at": "2023-08-03T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 4,
    "fields": {
      "title": "Examen Final de Física Cuántica",
      "clase": 6,
      "professor": 13,
      "created_at": "2023-08-20T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 5,
    "fields": {
      "title": "Examen Parcial de Mecánica Clásica",
      "clase": 7,
      "professor": 13,
      "created_at": "2023-08-21T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 6,
    "fields": {
      "title": "Examen Final de Química Orgánica",
      "clase": 8,
      "professor": 14,
      "created_at": "2023-08-22T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.exam",
    "pk": 7,
    "fields": {
      "title": "Examen Parcial de Química Inorgánica",
      "clase": 9,
      "professor": 14,
      "created_at": "2023-08-23T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 1,
    "fields": {
      "exam": 1,
      "document": 1
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 2,
    "fields": {
      "exam": 2,
      "document": 2
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 3,
    "fields": {
      "exam": 3,
      "document": 3
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 4,
    "fields": {
      "exam": 4,
      "document": 4
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 5,
    "fields": {
      "exam": 5,
      "document": 5
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 6,
    "fields": {
      "exam": 6,
      "document": 6
    }
  },
  {
    "model": "ai_backend.examcorrectiontrainingfile",
    "pk": 7,
    "fields": {
      "exam": 7,
      "document": 7
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 1,
    "fields": {
      "user": 6,
      "exam": 1,
      "grading_result": {"score": 85, "comments": "Buen trabajo en general."},
      "additional_feedback": "Continúa practicando los ejercicios de ecuaciones.",
      "created_at": "2023-08-10T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 2,
    "fields": {
      "user": 7,
      "exam": 1,
      "grading_result": {"score": 90, "comments": "Excelente comprensión del material."},
      "additional_feedback": "Considera repasar los temas avanzados para mejorar aún más.",
      "created_at": "2023-08-10T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 3,
    "fields": {
      "user": 8,
      "exam": 2,
      "grading_result": {"score": 78, "comments": "Comprensión adecuada, pero algunos errores."},
      "additional_feedback": "Trabaja en la precisión de los cálculos.",
      "created_at": "2023-08-11T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 4,
    "fields": {
      "user": 9,
      "exam": 3,
      "grading_result": {"score": 82, "comments": "Buena participación, sigue mejorando."},
      "additional_feedback": "Revisa los teoremas fundamentales.",
      "created_at": "2023-08-12T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 5,
    "fields": {
      "user": 10,
      "exam": 3,
      "grading_result": {"score": 88, "comments": "Muy buen desempeño, pocas fallas."},
      "additional_feedback": "Practica más para perfeccionar tus habilidades.",
      "created_at": "2023-08-12T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 6,
    "fields": {
      "user": 6,
      "exam": 4,
      "grading_result": {"score": 88, "comments": "Excelente comprensión de conceptos complejos."},
      "additional_feedback": "Continúa explorando más sobre los experimentos de pensamiento.",
      "created_at": "2023-08-24T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 7,
    "fields": {
      "user": 7,
      "exam": 5,
      "grading_result": {"score": 92, "comments": "Muy Bien"},
      "additional_feedback": "Test",
      "created_at": "2023-08-25T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 8,
    "fields": {
      "user": 10,
      "exam": 6,
      "grading_result": {"score": 85, "comments": "Hola!"},
      "additional_feedback": "test",
      "created_at": "2023-08-26T00:00:00Z"
    }
  },
  {
    "model": "ai_backend.examresult",
    "pk": 9,
    "fields": {
      "user": 11,
      "exam": 7,
      "grading_result": {"score": 89, "comments": "Comprensión sólida!"},
      "additional_feedback": "test",
      "created_at": "2023-08-27T00:00:00Z"
    }
  }
]



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/auth_views.py:

import logging
from django.contrib.auth import authenticate, login, get_user_model
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.views import View
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from ai_backend.serializers import CustomTokenObtainPairSerializer, UserUpdateSerializer
from rest_framework_simplejwt.views import TokenObtainPairView

CustomUser = get_user_model()
logger = logging.getLogger(__name__)

class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer

class LoginView(View):
    def get(self, request):
        next_url = request.GET.get('next', '')
        return render(request, 'registration/login.html', {'next': next_url})

    def post(self, request):
        username = request.POST.get('username')
        password = request.POST.get('password')
        next_url = request.POST.get('next', '')

        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            if next_url:
                return redirect(next_url)
            else:
                return redirect('home')
        else:
            error_message = 'Usuario o contraseña incorrectos'
            return render(request, 'registration/login.html', {
                'error_message': error_message,
                'next': next_url
            })

class UserDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user

    def get(self, request, *args, **kwargs):
        user = self.get_object()
        user_data = {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'email': user.email,
            'fecha_nacimiento': user.fecha_nacimiento,
            'sexo': user.sexo,
            'tipo_usuario': user.tipo_usuario,
            'profesion': user.profesion,
            'foto': user.foto.url if user.foto else None,
        }
        return Response(user_data, status=status.HTTP_200_OK)

    def put(self, request, *args, **kwargs):
        user = self.get_object()
        serializer = UserUpdateSerializer(user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, *args, **kwargs):
        user = self.get_object()
        user.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/exam_views.py:

import json
import logging
import base64
from django.shortcuts import get_object_or_404, render, redirect
from django.http import JsonResponse
from django.utils.decorators import method_decorator
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from ai_backend.models import Exam, ExamResult, Clase, ExamCorrectionTrainingFile
from ai_backend.utils import read_system_prompt
from ai_backend.clients import create_completion, extract_exam_data
from django.views import View

logger = logging.getLogger(__name__)

CustomUser = get_user_model()

def extract_exam_data_from_model(exam):
    # This function should convert the exemplary exam file stored in the database
    # into a format that can be used for grading
    exemplary_files = exam.exemplary_files.all()
    base64_list = [
        base64.b64encode(exam_file.file.read()).decode('utf-8') for exam_file in exemplary_files
    ]
    return extract_exam_data(base64_list, "sample")

class ExamUploadView(LoginRequiredMixin, View):
    def post(self, request, exam_id=None, student_id=None):
        user = request.user

        if not hasattr(user, 'tipo_usuario') or user.tipo_usuario != 'profesor':
            return JsonResponse({'error': 'Only professors can create or grade exams.'}, status=403)

        exam = get_object_or_404(Exam, id=exam_id)

        sample_exam_text = extract_exam_data_from_model(exam)

        if student_id and 'student_exam' in request.FILES:
            student = get_object_or_404(CustomUser, id=student_id)
            student_exam_file = request.FILES['student_exam']
            student_exam_base64 = base64.b64encode(student_exam_file.read()).decode('utf-8')
            student_exam_text = extract_exam_data([student_exam_base64], "student")

            messages = [
                {"role": "system", "content": read_system_prompt(filename='ai_backend/sabio/sysprompts/exam_grader.md')},
                {"role": "user", "content": sample_exam_text},
                {"role": "user", "content": student_exam_text}
            ]
            model = 'gpt-4o'
            max_tokens = 4096
            response_format = {"type": "json_object"}

            grading_result = json.loads(
                create_completion(
                    messages=messages,
                    model=model,
                    max_tokens=max_tokens,
                    response_format=response_format
                )
            )

            exam_result = ExamResult.objects.create(
                user=student,
                exam=exam,
                grading_result=grading_result
            )

            return redirect('exam_success', exam_id=exam_result.id)

        return redirect('view_exam', exam_id=exam.id)

@method_decorator(login_required, name='dispatch')
class UploadExemplaryExamView(View):
    def post(self, request, exam_id):
        exam = get_object_or_404(Exam, id=exam_id)
        
        if request.user != exam.professor:
            return render(request, 'home.html', {'error': 'Only the professor can upload the exemplary exam.'})

        existing_files = exam.exemplary_files.all()
        for existing_file in existing_files:
            if existing_file.file:
                existing_file.file.delete(save=False)
            existing_file.delete()

        if 'exemplary_exam' in request.FILES:
            for file in request.FILES.getlist('exemplary_exam'):
                exam_file = ExamCorrectionTrainingFile(exam=exam, file=file)
                exam_file.save()

            return redirect('view_exam', exam_id=exam.id)

        return render(request, 'view_exam.html', {'exam': exam, 'error': 'Please upload a valid file.'})

    def get(self, request, exam_id):
        exam = get_object_or_404(Exam, id=exam_id)
        return render(request, 'view_exam.html', {'exam': exam})

class ExamSuccessView(LoginRequiredMixin, View):
    def get(self, request, exam_id):
        exam_result = get_object_or_404(ExamResult, id=exam_id)
        
        grading_result = exam_result.grading_result
        results = grading_result.get("results", [])
        overall_score = grading_result.get("overall_score", "N/A")
        summary_feedback = grading_result.get("summary_feedback", "")
        
        context = {
            'exam_title': exam_result.exam.title,
            'results': results,
            'overall_score': overall_score,
            'summary_feedback': summary_feedback,
        }
        return render(request, 'exam_success.html', context)

    def post(self, request, exam_id):
        additional_feedback = request.POST.get('additional_feedback')
        exam_result = get_object_or_404(ExamResult, id=exam_id)
        exam_result.additional_feedback = additional_feedback
        exam_result.save()
        return redirect('exam_success', exam_id=exam_id)

@method_decorator(login_required, name='dispatch')
class HomeView(View):
    def get(self, request):
        professor = request.user
        if professor.tipo_usuario != 'profesor':
            return render(request, 'home.html', {'error': 'Only professors can view this page.'})

        classes = Clase.objects.filter(profesor=professor).prefetch_related('exams', 'estudiantes')
        
        class_data = []
        for clase in classes:
            exams = []
            for exam in clase.exams.all():
                students = []
                for student in clase.estudiantes.all():
                    has_result = ExamResult.objects.filter(user=student, exam=exam).exists()
                    if has_result:
                        most_recent_result = ExamResult.objects.filter(user=student, exam=exam).order_by('-created_at').first()
                        grading_result = most_recent_result.grading_result if most_recent_result else None
                    else:
                        grading_result = None
                    students.append({
                        'student': student,
                        'has_result': has_result,
                        'result': grading_result
                    })
                exams.append({'exam': exam, 'students': students})
            class_data.append({'class': clase, 'exams': exams})

        context = {
            'class_data': class_data,
        }
        return render(request, 'home.html', context)

@method_decorator(login_required, name='dispatch')
class CreateExamView(View):
    def get(self, request, class_id):
        clase = get_object_or_404(Clase, id=class_id)
        if request.user != clase.profesor:
            return render(request, 'home.html', {'error': 'Only the class professor can create an exam.'})

        return render(request, 'create_exam.html', {'clase': clase})

    def post(self, request, class_id):
        clase = get_object_or_404(Clase, id=class_id)
        if request.user != clase.profesor:
            return render(request, 'home.html', {'error': 'Only the class professor can create an exam.'})

        exam_title = request.POST.get('exam_title')
        if exam_title:
            exam = Exam.objects.create(title=exam_title, clase=clase, professor=request.user)
            return redirect('home')
        else:
            return render(request, 'create_exam.html', {'clase': clase, 'error': 'Please provide a title for the exam.'})
        
@method_decorator(login_required, name='dispatch')
class ViewExamView(View):
    def get(self, request, exam_id):
        exam = get_object_or_404(Exam, id=exam_id)
        clase = exam.clase
        
        students = clase.estudiantes.all()

        context = {
            'exam': exam,
            'students': students,
        }
        return render(request, 'view_exam.html', context)

    def post(self, request, exam_id, student_id=None):
        exam = get_object_or_404(Exam, id=exam_id)
        
        if student_id and 'student_exam' in request.FILES:
            student_exam_file = request.FILES['student_exam']
            return redirect('exam_upload', exam_id=exam.id, student_id=student_id)

        return render(request, 'view_exam.html', {'exam': exam, 'error': 'Please upload a valid file.'})



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/__init__.py:

# ai_backend/views/__init__.py

from .auth_views import CustomTokenObtainPairView, LoginView, UserDetailView
from .document_views import serve_protected_media, DocumentUploadView, lista_documentos, eliminar_documento
from .class_views import get_student_hilo_documents_per_class, add_student_to_class, ListaAlumnosClaseView, ListaClasesProfesorView
from .exam_views import ExamUploadView, UploadExemplaryExamView, ExamSuccessView, HomeView, CreateExamView, ViewExamView
from .thread_views import crear_hilo, eliminar_hilo, DetalleHiloView, ListaHilosView
from .utility_views import csrf, landing_page, LogoInstitucionView, ProfilePictureView,ChatbotAPIView



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/class_views.py:

from django.shortcuts import get_object_or_404
from django.db import transaction
from django.core.exceptions import ObjectDoesNotExist
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from ai_backend.models import Clase, CustomUser, Hilo, Documento
import secrets
import string
import logging

logger = logging.getLogger(__name__)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_student_hilo_documents_per_class(request):
    clase_id = request.query_params.get('clase_id')
    profesor = request.user

    if not clase_id:
        return Response({'error': 'clase_id query parameter is required.'}, status=status.HTTP_400_BAD_REQUEST)

    clase = get_object_or_404(Clase, id=clase_id)

    if clase.profesor != profesor:
        return Response({'error': 'You do not have permission to view these documents. Ensure you are the professor of this class.'}, status=status.HTTP_403_FORBIDDEN)

    students_hilos_docs = []

    for student in clase.estudiantes.all():
        student_data = {
            'student_id': student.id,
            'student_username': student.username,
            'hilos': []
        }

        hilos = Hilo.objects.filter(clase=clase, user=student)

        for hilo in hilos:
            hilo_data = {
                'hilo_id': hilo.id,
                'documents': []
            }

            documentos = Documento.objects.filter(hilo=hilo)

            for doc in documentos:
                hilo_data['documents'].append({
                    'document_id': doc.id,
                    'archivo': doc.archivo.url,
                    'tipo': doc.tipo,
                    'fecha_subida': doc.fecha_subida
                })

            student_data['hilos'].append(hilo_data)

        students_hilos_docs.append(student_data)

    return Response(students_hilos_docs, status=status.HTTP_200_OK)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_student_to_class(request):
    profesor = request.user
    clase_id = request.data.get('clase_id')
    student_email = request.data.get('student_email')

    if profesor.tipo_usuario != 'profesor':
        return Response(
            {'error': 'Only professors can add students to a class. Ensure you are logged in as a professor.'},
            status=status.HTTP_403_FORBIDDEN
        )

    if not clase_id or not student_email:
        return Response(
            {'error': 'Both clase_id and student_email are required. Please provide them in the request body.'},
            status=status.HTTP_400_BAD_REQUEST
        )

    clase = get_object_or_404(Clase, id=clase_id)

    if clase.profesor != profesor:
        return Response(
            {'error': 'You do not have permission to add students to this class. Ensure you are the professor of this class.'},
            status=status.HTTP_403_FORBIDDEN
        )

    try:
        student = CustomUser.objects.get(email=student_email)
        clase.estudiantes.add(student)
        clase.save()
        return Response({'message': 'Student added to the class successfully.'}, status=status.HTTP_200_OK)
    except CustomUser.DoesNotExist:
        base_username = student_email.split('@')[0]
        username = base_username
        suffix = 1
        while CustomUser.objects.filter(username=username).exists():
            username = f"{base_username}{suffix}"
            suffix += 1

        characters = string.ascii_letters + string.digits + string.punctuation
        temporary_password = ''.join(secrets.choice(characters) for i in range(12))
        
        with transaction.atomic():
            student = CustomUser.objects.create_user(
                username=username,
                email=student_email,
                password=temporary_password,
                tipo_usuario='alumno'
            )
            student.has_temporary_password = True
            student.save()

            clase.estudiantes.add(student)
            clase.save()

        return Response({'message': 'Student used to not have an account with us. Account now created, email has been sent to the student with a temporary username and password, and they have been successfully added to the class.'}, status=status.HTTP_200_OK)

class ListaAlumnosClaseView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        clase_id = request.query_params.get("clase_id")
        clase = get_object_or_404(Clase, id=clase_id)
        
        if request.user != clase.profesor and not request.user.is_staff:
            return Response({'detail': 'You do not have permission to access this list.'}, status=status.HTTP_403_FORBIDDEN)
        
        alumnos = clase.estudiantes.values(
            'id', 
            'username', 
            'first_name', 
            'last_name', 
            'email', 
            'fecha_nacimiento', 
            'sexo'
        )
        
        return Response(list(alumnos))

class ListaClasesProfesorView(APIView):
    permission_classes = [IsAuthenticated]
    def get(self, request, *args, **kwargs):
        profesor_id = request.query_params.get("profesor_id")

        if not profesor_id:
            return Response({'error': 'profesor_id query parameter is required.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            profesor_id = int(profesor_id)
        except ValueError:
            return Response({'error': 'profesor_id must be an integer.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            if request.user.id != profesor_id and not request.user.is_staff:
                return Response({'error': 'You do not have permission to access this information.'}, status=status.HTTP_403_FORBIDDEN)

            if request.user.tipo_usuario != 'profesor':
                return Response({'error': 'Only professors can access this information.'}, status=status.HTTP_403_FORBIDDEN)

            profesor = get_object_or_404(CustomUser, id=profesor_id, tipo_usuario='profesor')

            clases = Clase.objects.filter(profesor=profesor).values('id', 'nombre')
            clases_list = list(clases)
            return Response(clases_list, safe=False)

        except CustomUser.DoesNotExist:
            return Response({'error': 'Professor not found.'}, status=status.HTTP_404_NOT_FOUND)



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/document_views.py:

import os
import logging
import hashlib
from mimetypes import guess_type
from django.shortcuts import get_object_or_404
from django.core.exceptions import ObjectDoesNotExist
from rest_framework.exceptions import PermissionDenied
from django.conf import settings
from django.http import JsonResponse, HttpResponse, HttpResponseForbidden, HttpResponseNotFound, Http404
from django.utils._os import safe_join
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from ai_backend.models import Documento, Clase, Hilo
from ai_backend.sabio.teacher.actualizar_data import main as actualizar_main
from chromadb_setup import remove_documento_embedding
logger = logging.getLogger(__name__)

@permission_classes([IsAuthenticated])
def serve_protected_media(request, file_path):
    path = safe_join(settings.MEDIA_ROOT, file_path)
    if not os.path.exists(path):
        raise Http404('File does not exist')

    content_type, encoding = guess_type(path)
    content_type = content_type or 'application/octet-stream'
    
    with open(path, 'rb') as file:
        response = HttpResponse(file.read(), content_type=content_type)
        if encoding:
            response['Content-Encoding'] = encoding
        return response

def generate_file_hash(file):
    hash_md5 = hashlib.md5()
    for chunk in file.chunks():
        hash_md5.update(chunk)
    return hash_md5.hexdigest()

class DocumentUploadView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        document_id = request.query_params.get('document_id')
        if not document_id:
            logger.error("No document_id provided in GET request")
            return JsonResponse({'error': 'No document_id provided'}, status=400)

        documento = get_object_or_404(Documento, id=document_id)
        
        if not self.has_permission_to_view(documento, request.user):
            logger.error(f"User {request.user.id} does not have permission to view document {document_id}")
            return JsonResponse({'error': 'You do not have permission to view this document'}, status=403)

        document_details = {
            'id': documento.id,
            'archivo': documento.archivo.url if documento.archivo else None,
            'tipo': documento.tipo,
            'clase_id': documento.clase.id if documento.clase else None,
            'hilo_id': documento.hilo.id if documento.hilo else None,
        }
        return JsonResponse(document_details)

    def get_context(self, data, user):
        """
        Determine the context (class or thread) and validate user permissions.
        """
        try:
            if "clase_id" in data:
                clase = get_object_or_404(Clase, id=data['clase_id'])
                if clase.profesor != user:
                    logger.error(f"User {user.id} is not the professor of class {clase.id}")
                    raise PermissionDenied("You are not authenticated as the educator of this class.")
                return data['clase_id'], clase, "class_training"
            elif "hilo_id" in data:
                hilo = get_object_or_404(Hilo, id=data['hilo_id'])
                if hilo.user != user:
                    logger.error(f"User {user.id} is not the owner of thread {hilo.id}")
                    raise PermissionDenied("You do not have permission to upload documents to this thread.")
                return data['hilo_id'], hilo, "chat_doc"
            else:
                logger.error("Invalid context in POST request")
                raise ValueError("Invalid context: either 'clase_id' or 'hilo_id' must be provided.")
        
        except Http404 as e:
            logger.error(f"Context not found: {str(e)}")
            raise ValueError("The specified context does not exist.")

    def post(self, request, *args, **kwargs):
        user = request.user

        try:
            context_id, context_instance, role = self.get_context(request.data, user)

            if not context_id:
                logger.error("Invalid context: either 'clase_id' or 'hilo_id' must be provided")
                return JsonResponse({'error': 'Invalid context: either "clase_id" or "hilo_id" must be provided'}, status=400)

            if not request.FILES.getlist('archivo'):
                logger.error("No files provided in the request")
                return JsonResponse({'error': 'No files provided'}, status=400)

            uploaded_files_info = []
            for file in request.FILES.getlist('archivo'):
                file_hash = generate_file_hash(file)
                if not self.document_exists(role, context_id, file_hash):
                    uploaded_files_info.append(self.save_document(file, role, context_instance))
                else:
                    logger.info(f"Duplicate document detected, skipping file with hash: {file_hash}")

            if not uploaded_files_info:
                logger.warning("No new files were uploaded (possibly duplicates)")
                return JsonResponse({'warning': 'No new files were uploaded (possibly duplicates)'}, status=200)

            if role == "class_training":
                try:
                    actualizar_main(pdf_inputs=uploaded_files_info, id=context_id, max_tokens=1000, role=role)
                    logger.info("Files uploaded and processed successfully")
                except Exception as e:
                    logger.error(f"Failed to update the main system: {str(e)}")
                    return JsonResponse({'error': 'Failed to update the main system'}, status=500)

            return JsonResponse({'message': 'Files uploaded and processed successfully'}, status=201)

        except ValueError as e:
            logger.error(f"Validation error: {str(e)}")
            return JsonResponse({'error': str(e)}, status=400)
        except ObjectDoesNotExist as e:
            logger.error(f"Object does not exist: {str(e)}")
            return JsonResponse({'error': 'Resource not found'}, status=404)
        except PermissionDenied as e:
            logger.error(f"Permission denied: {str(e)}")
            return JsonResponse({'error': 'Permission denied'}, status=403)
        except Exception as e:
            logger.exception("An unexpected error occurred during document upload")
            return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

    def save_document(self, file, role, context_instance):
        """
        Save the document and return its details.
        """
        file_hash = generate_file_hash(file)
        documento_kwargs = {'archivo': file, 'tipo': 'PDF', 'hash': file_hash}
        if role == "class_training":
            documento_kwargs['clase'] = context_instance
        elif role == "chat_doc":
            documento_kwargs['hilo'] = context_instance
        
        documento = Documento.objects.create(**documento_kwargs)
        logger.info(f"Document {documento.id} created with hash {file_hash}")
        return {"file_path": documento.archivo.path, "documento_id": documento.id}

    def document_exists(self, role, context_id, file_hash):
        """
        Check if a document with the same hash already exists in the given context.
        """
        if role == "class_training":
            exists = Documento.objects.filter(hash=file_hash, clase_id=context_id).exists()
        elif role == "chat_doc":
            exists = Documento.objects.filter(hash=file_hash, hilo_id=context_id).exists()
        else:
            exists = False
        
        if exists:
            logger.info(f"Document with hash {file_hash} already exists in context {context_id}")
        return exists

    def has_permission_to_view(self, documento, user):
        """
        Check if the user has permission to view the document.
        """
        if documento.clase and (documento.clase.profesor == user or user in documento.clase.estudiantes.all()):
            return True
        if documento.hilo and (documento.hilo.user == user or documento.hilo.clase.profesor == user):
            return True
        return False

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def lista_documentos(request, doc_type):
    user = request.user
    if doc_type == 'class':
        clase_id = request.query_params.get("clase_id")
        if not clase_id:
            return JsonResponse({'error': 'Missing clase_id. Please provide a valid clase_id to retrieve documents.'}, status=400)
        clase = get_object_or_404(Clase, id=clase_id)
        if not (clase.profesor == user or user in clase.estudiantes.all()):
            return HttpResponseForbidden('You do not have permission to view these documents.')
        documentos = Documento.objects.filter(clase=clase).values('id', 'archivo', 'fecha_subida')

    elif doc_type == 'chat':
        hilo_id = request.query_params.get("hilo_id")
        if not hilo_id:
            return JsonResponse({'error': 'Missing hilo_id. Please provide a valid hilo_id to retrieve documents.'}, status=400)
        hilo = get_object_or_404(Hilo, id=hilo_id)
        if not (hilo.user == user or (hilo.clase and hilo.clase.profesor == user)):
            return HttpResponseForbidden('You do not have permission to view these documents.')
        documentos = Documento.objects.filter(hilo=hilo).values('id', 'archivo', 'fecha_subida')

    else:
        return JsonResponse({'error': 'Document type not recognized. Valid types are "class" or "chat".'}, status=400)

    documentos_info = list(documentos)
    if not documentos_info:
        return JsonResponse({'message': 'No documents found for the provided criteria.'}, safe=False)
    else:
        return JsonResponse(documentos_info, safe=False)

@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def eliminar_documento(request):
    documento_id = request.data.get("documento_id")
    if not documento_id:
        return JsonResponse({'error': 'Missing documento_id. Please provide the ID of the document to delete.'}, status=400)
    
    user = request.user
    try:
        documento = Documento.objects.get(id=documento_id)

        if documento.clase and documento.clase.profesor != user:
            return HttpResponseForbidden('You do not have permission to delete this document.')
        if documento.hilo and documento.hilo.user != user:
            return HttpResponseForbidden('You do not have permission to delete this document.')

        if not Documento.objects.filter(archivo=documento.archivo, hash=documento.hash).exclude(id=documento_id).exists():
            if os.path.isfile(documento.archivo.path):
                os.remove(documento.archivo.path)

        remove_documento_embedding(documento_id, documento.clase.id if documento.clase else documento.hilo.id, "clase" if documento.clase else "hilo")

        documento.delete()
        return JsonResponse({'message': 'Document deleted successfully.'})
    except Documento.DoesNotExist:
        return HttpResponseNotFound('Document not found.')




/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/thread_views.py:

import logging
from django.core.paginator import Paginator
from django.shortcuts import get_object_or_404
from django.http import JsonResponse, Http404
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.exceptions import PermissionDenied

from ai_backend.models import Hilo, Clase

logger = logging.getLogger(__name__)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def crear_hilo(request):
    user = request.user
    clase_id = request.data.get('clase_id')

    try:
        clase = Clase.objects.get(id=clase_id)
    except Clase.DoesNotExist:
        return Response({'error': 'Clase no encontrada.'}, status=status.HTTP_404_NOT_FOUND)

    if clase.profesor != user and user not in clase.estudiantes.all():
        return Response({'error': 'No tienes permiso para crear un hilo en esta clase.'}, status=status.HTTP_403_FORBIDDEN)

    hilo = Hilo.objects.create(clase=clase, user=user)

    return Response({'message': 'Hilo creado exitosamente.', 'hilo_id': hilo.id}, status=status.HTTP_201_CREATED)

@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def eliminar_hilo(request):
    user = request.user
    hilo_id = request.data.get('hilo_id')

    if not hilo_id:
        return Response({'error': 'hilo_id is required.'}, status=status.HTTP_400_BAD_REQUEST)

    try:
        hilo = Hilo.objects.get(id=hilo_id)
    except Hilo.DoesNotExist:
        return Response({'error': 'Hilo no encontrado.'}, status=status.HTTP_404_NOT_FOUND)

    if hilo.user != user:
        return Response({'error': 'No tienes permiso para eliminar este hilo.'}, status=status.HTTP_403_FORBIDDEN)

    hilo.delete()

    return Response({'message': 'Hilo eliminado exitosamente.'}, status=status.HTTP_200_OK)

class DetalleHiloView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        try:
            hilo_id = request.query_params.get('hilo_id')
            if not hilo_id:
                return JsonResponse({'error': 'Missing hilo_id. Please provide the ID of the hilo to retrieve details.'}, status=400)

            hilo = get_object_or_404(Hilo, id=hilo_id)

            if hilo.user != request.user and (not hilo.clase or (hilo.clase.profesor != request.user and request.user not in hilo.clase.estudiantes.all())):
                raise PermissionDenied("You do not have permission to view this thread.")

            mensajes_qs = hilo.mensajes.order_by('-timestamp').select_related('hilo')
            paginator = Paginator(mensajes_qs, 10)
            page_number = request.GET.get('page')
            mensajes_page = paginator.get_page(page_number)

            mensajes_data = []
            for mensaje in mensajes_page:
                mensaje_data = {
                    'id': mensaje.id,
                    'texto': mensaje.texto,
                    'es_del_bot': mensaje.es_del_bot,
                    'timestamp': mensaje.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                }
                mensajes_data.append(mensaje_data)

            is_last_page = not mensajes_page.has_next()

            return JsonResponse({
                'hilo_id': hilo_id,
                'mensajes': mensajes_data,
                'is_last_page': is_last_page
            }, safe=False)

        except PermissionDenied as e:
            return JsonResponse({'error': str(e)}, status=403)
        except Http404:
            return JsonResponse({'error': 'Thread not found. Please ensure the hilo_id is correct and exists.'}, status=404)
        except Exception as e:
            logger.error(f"Error retrieving hilo details: {str(e)}")
            return JsonResponse({'error': 'An unexpected error occurred while processing your request. Please try again later.'}, status=500)

class ListaHilosView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        user = request.user
        clase_id = request.query_params.get('clase_id')

        if clase_id:
            hilos = Hilo.objects.filter(user=user, clase_id=clase_id).order_by('-ultima_actualizacion')
        else:
            hilos = Hilo.objects.filter(user=user).order_by('-ultima_actualizacion')
        
        if not hilos.exists():
            return JsonResponse({'message': 'No se encontraron hilos para el usuario.'}, status=404)

        hilos_data = [
            {
                "id": hilo.id,
                "clase_id": hilo.clase.id if hilo.clase else None,
                "user_id": hilo.user.id if hilo.user else None,
                "fecha_creacion": hilo.fecha_creacion.strftime("%Y-%m-%d %H:%M:%S"),
                "ultima_actualizacion": hilo.ultima_actualizacion.strftime("%Y-%m-%d %H:%M:%S")
            } for hilo in hilos
        ]

        return JsonResponse(hilos_data, safe=False)



/Users/andresshamis/VSCodeProjects/sab.io/backend/ai_backend/views/utility_views.py:

import os
import logging
from django.http import JsonResponse, HttpResponse, HttpResponseBadRequest, Http404
from django.shortcuts import get_object_or_404, render
from django.conf import settings
from django.utils._os import safe_join
from django.views import View
from django.middleware.csrf import get_token
from django.core.exceptions import PermissionDenied
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from ai_backend.models import Institucion, CustomUser, Hilo
from ai_backend.sabio.student.chatbot import main
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core.exceptions import ValidationError
from mimetypes import guess_type


# Configuración del logger
logger = logging.getLogger(__name__)

def csrf(request):
    """
    Devuelve el token CSRF para el cliente.
    """
    return JsonResponse({'csrfToken': get_token(request)})

def landing_page(request):
    """
    Renderiza la página de inicio.
    """
    return render(request, 'index.html')

@permission_classes([IsAuthenticated])
def serve_protected_media(request, file_path):
    """
    Sirve archivos protegidos desde el directorio de medios.
    """
    path = safe_join(settings.MEDIA_ROOT, file_path)
    if not os.path.exists(path):
        raise Http404('File does not exist')

    content_type, encoding = guess_type(path)
    content_type = content_type or 'application/octet-stream'
    
    with open(path, 'rb') as file:
        response = HttpResponse(file.read(), content_type=content_type)
        if encoding:
            response['Content-Encoding'] = encoding
        return response

class LogoInstitucionView(APIView):
    """
    Devuelve la URL del logo de la institución.
    """
    def get(self, request, *args, **kwargs):
        try:
            institucion_id = request.query_params.get("institucion_id")
            institucion = Institucion.objects.get(id=institucion_id)
            if institucion.logo:
                logo_url = request.build_absolute_uri(institucion.logo.url)
                return Response({'logo_url': logo_url})
            else:
                return Response({'error': 'Logo no encontrado'}, status=Http404)
        except Institucion.DoesNotExist:
            return Response({'error': 'Institución no encontrada'}, status=Http404)

class ProfilePictureView(APIView):
    """
    Vista para subir y obtener la foto de perfil del usuario.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            user_id = request.user.id
            image_file = request.FILES.get('image')
            
            if not image_file:
                logger.warning(f"No image file provided for user_id: {user_id}")
                return HttpResponseBadRequest('No image file provided.')

            # Validate image format and size
            if not image_file.content_type.startswith('image/'):
                logger.warning(f"Invalid file type provided for user_id: {user_id}")
                return HttpResponseBadRequest('Invalid file type provided.')
            if image_file.size > 5 * 1024 * 1024:  # Limit to 5 MB
                logger.warning(f"File size too large for user_id: {user_id}")
                return HttpResponseBadRequest('File size exceeds the limit of 5 MB.')

            user_instance = get_object_or_404(CustomUser, id=user_id, username=request.user.username)
            user_instance.foto = image_file
            user_instance.save()

            logger.info(f"Profile picture updated successfully for {request.user.username}, user_id: {user_id}")
            return JsonResponse({'message': 'Profile picture updated successfully.'})

        except CustomUser.DoesNotExist:
            logger.error(f"User with id {user_id} does not exist.")
            return JsonResponse({'error': 'User not found.'}, status=Http404)
        except ValidationError as e:
            logger.error(f"Validation error for {request.user.username}, user_id: {user_id}: {e}")
            return JsonResponse({'error': 'Validation error occurred.'}, status=400)
        except IOError as e:
            logger.error(f"File handling error for {request.user.username}, user_id: {user_id}: {e}")
            return JsonResponse({'error': 'File handling error occurred.'}, status=500)
        except Exception as e:
            logger.exception(f"Unhandled error for {request.user.username}, user_id: {user_id}: {e}")
            return HttpResponseBadRequest(f"An unexpected error occurred: {e}")

    def get(self, request):
        try:
            user_id = request.query_params.get("user_id")
            user_instance = get_object_or_404(CustomUser, id=user_id)

            if request.user != user_instance and not request.user.is_staff:
                raise PermissionDenied("You do not have permission to view other users' profile pictures.")

            if user_instance.foto:
                logger.info(f"Profile picture retrieved for user_id: {user_id}")
                return JsonResponse({'imageUrl': user_instance.foto.url})
            else:
                logger.warning(f"Profile picture not found for user_id: {user_id}")
                return JsonResponse({'error': 'Profile picture not found.'}, status=404)
        except CustomUser.DoesNotExist:
            logger.error(f"User with id {user_id} does not exist.")
            return JsonResponse({'error': 'User not found.'}, status=Http404)
        except PermissionDenied as e:
            logger.error(f"Permission denied: {str(e)}")
            return JsonResponse({'error': str(e)}, status=403)
        except Exception as e:
            logger.exception(f"Error handling GET request for user_id: {user_id}: {e}")
            return HttpResponseBadRequest(f"An unexpected error occurred: {e}")

class ChatbotAPIView(APIView):
    """
    Vista para interactuar con el chatbot.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        try:
            hilo_id = request.data.get('hilo_id')
            user_message = request.data.get('message')

            if not hilo_id:
                return Response({'error': 'Missing hilo_id.'}, status=400)
            if not user_message:
                return Response({'error': 'Missing message.'}, status=400)

            hilo = get_object_or_404(Hilo, id=hilo_id)
            if hilo.user != request.user:
                return Response({'error': 'Access denied.'}, status=403)

            completion_result = main(hilo_id, user_message)

            return Response({'completion': completion_result})

        except Exception as e:
            logger.error(f"Error processing chatbot request: {str(e)}")
            return Response({'error': 'An unexpected error occurred.'}, status=500)



